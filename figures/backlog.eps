%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: backlog.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: victor
%%CreationDate: 2017/3/22, 16:09:28
%%BoundingBox: 0 0 241 72
%%HiResBoundingBox: 0 0 240.8719 72
%%CropBox: 0 0 240.8719 72
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1024 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2017-03-22T16:07:50+08:00"
   xmp:ModifyDate="2017-03-22T16:08:43+08:00"
   xmp:MetadataDate="2017-03-22T16:08:43+08:00"
   pdf:Producer="Microsoft: Print To PDF"
   xmpMM:DocumentID="uuid:84a9d34c-2966-4d82-af31-68ca938a0110"
   xmpMM:InstanceID="uuid:2809ac31-ce44-462e-b14f-521ef69236a8">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>victor</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Visio-ç»Ÿåł¾1</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -72 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 72 li
240.872 72 li
240.872 0 li
cp
clp
gsave
89.4109 143.041 mo
120.611 143.041 li
120.611 157.201 li
89.4109 157.201 li
cp
eclp
89.1709 157.441 mo
120.851 157.441 li
120.851 142.801 li
89.1709 142.801 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[31.68 0 0 14.64 73.4618 -85.4409 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 122 
/M[1 0 0 -122 0 122 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-"9\i1"9\i1"9\i1"U,&6
"U,&5"U,&5#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)!s8W-!s8W-!s8W-"9\i2
"9\i1"9\i1"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)!s8W-!s8W-!s8W-"9\i2
"9\i1"9\i1"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
89.4109 157.201 mo
120.611 157.201 li
120.611 143.041 li
89.4109 143.041 li
89.4109 157.201 li
cp
false sop
.67657 .608606 .594385 .472297 cmyk
@
0 .990631 1 .000396735 cmyk
%ADOBeginSubsetFont: PBAAAA+CIDFont+F1 Initial
ct_T42Dict begin
-0.516 -0.348 1.262 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+CIDFont+F1
Type42DictBegin
[<00010000000c000c000c000c4f532f329bef5ff1000000cc000000606376
74203fba58ec0000012c000006886670676da1ea42ac000007b400000913
676c7966b6eed1cb0000e214000034f468656164f519a791000010c80000
0036686865610dbb152e0000110000000024686d7478d83113f300001124
000056626c6f6361938f850900006788000032566d61787026a517ec0000
99e0000000206e616d65d105a20c00009a000000312d70726570f940ca73
0000cb30000016e1676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e0002affc000247b00000009000000004d53202000200000
25cc0600fe0001c4079e0226200001ff0000000003c0050e000000200014
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000005aa001500a0fff8ff42fea2fdbc03b6015401cc
0108010e00ff00f5006e014000a0055e006b0570fff60122fff10547ffec
04faffec0131fff4000a03a0036600b400e1044c007c40465f5e5d5c5b5a
59585554535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a
39383736352f2e2d2c2826252423221f181411100f0d0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228
453ab10200080d2d2c2045b00325456164b050515845441b2121592d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a87b011
2bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52584544
1b2121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4523456023456023456023766818
b08062202d2cb00426b00426b00425b0042545234520b003266062636820
b0032661658a2344442d2c2045b0005458b040442045b04061441b212159
2d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b
2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b014
43b0006063b0016069442d2cb02f45442d2c452320458a60442d2c452345
60442d2c4b235158b90033ffe0b134201bb3330034005944442d2cb01643
58b00326458a586466b01f601b64b020606620581b21b04059b001615923
586559b02923442310b029e01b2121212121592d2cb0164358b004254564
b020606620581b21b04059b0016123586559b0292344b00425b007250820
58021b0359b0052510b004252046b0042523423cb0072510b006252046b0
0425b0016023423c2058011b0059b0052510b00425b029e0b0072510b006
25b029e0b00425b00725082058021b0359b00425b003254348b00625b003
25b0016043481b2159212121212121212d2cb0164358b004254564b02060
6620581b21b04059b0016123581b6559b0292344b00525b0082508205802
1b0359b0042510b005252046b0042523423cb00425b0072508b0072510b0
06252046b00425b0016023423c2058011b0059b0042510b00525b029e0b0
2920456544b0072510b00625b029e0b00525b00825082058021b0359b005
25b003254348b00425b0072508b00625b00325b0016043481b2159212121
212121212d2c02b00425202046b004252342b0052508b003254548212121
212d2c02b0032520b0042508b0022543482121212d2c452320451820b000
50205823652359236820b040505821b04059235865598a60442d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0024354
58b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb00243
5458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c208a
08234b538a4b515a5823381b2121592d2c0020b200400325b0062649618b
3812342d2c014623466023466123201020468a61b8ff80628ab140408a70
4560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2c
b012004b014b54422d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d000001000000062e146e056dfd5f0f3cf50019080000000000
bbeb7ccc00000000d406b22efbdafd350a1a085000010009000200000000
0000000100000600fe0001c40aa0fbdafa860a1a00010000000000000000
0000000000001207040e0000000000000000000001cf0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000460008d000000000000000000000000000000000000
0000000000000000000006fe008d00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003c8003f0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000004380086000000000000000000000000
000000000000000000000000049100860000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000040500860000000000000000000000000000000000000000
000000000000000006480086000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000004250086000000000000000000000000036f004300000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000044b007e0000000000000000000000000000
0000000000000000000000000000000000000000000000000000044b004b
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003d7007e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002d8007e000000000000000000000000033100490000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002f5005a0000000002f5
003a00000000000000000000000000000000000000000000000002c0005a
0000000000000000000000000000000000000000000000000200005a023a
003c00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000038200790000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000002de001903f2004f03f00043
00000000000000000000000000000000000000000000000000000000040e
0094040e0058040e00550000000000000000000000000000000000000000
000000000000000002ad001c03a000510385004d00000000000000000000
000000000000000000000000000000000000039f0079039f0050039f0053
0000000000000000000000000000000000000000000000000000000002de
001903f2004f03f000430000000000000000000000000000000000000000
0000000000000000040e0094040e0058040e005500000000000000000000
0000000000000000000000000000000000000205001d02b4003e02b00038
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000205001d02b4003e02b00038
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000020500250270003002740023
000000000000000000000000000000000000000000000000000000000205
002502700030027400230000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000004c1006600000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000002f4007800000000
049a007800000000000000000000000000000000000000000288003a0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002f4007800000000049a
007800000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000019900000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000270005402700040027000440000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000002660059026600470266004a00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000ffa800000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000>
<0000009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e011d011d011d011d011d011d011d011d01e001e001e001e001e001e0
01e001e001e001e001e001e001e001e001e001e001e001e001e001e001e0
01e001e001e001e001e0029b029b029b029b029b029b029b029b029b029b
029b029b029b029b029b029b029b029b029b029b029b029b029b029b029b
029b029b029b029b029b029b029b029b029b029b029b029b029b029b029b
029b029b029b029b029b029b029b029b029b029b03170317031703170317
03170317035c035c035c035c035c035c035c035c035c035c035c035c035c
035c035c035c035c035c035c035c035c035c035c035c035c035c035c035c
035c035c035c035c035c035c035c035c03d003d003d003d003d003d003d0
03d004460446044604460446044604460446044604460446044604460446
0446044604460446044604460446044604c304c304c304c3054c054c054c
054c054c054c054c054c054c054c054c054c054c054c054c054c054c054c
054c054c054c054c054c054c054c054c054c054c054c054c054c054c054c
054c054c054c054c054c054c054c054c054c054c054c054c054c054c054c
054c054c05ed05ed05ed05ed05ed05ed05ed05ed05ed05ed05ed06880688
068806880688068806880688068806880688068806880688068806880688
068806880688068806880688068806880688068806880688068806880688
068806880688068806880688068806880688068806880688068806880688
068806880688068806880688068806880688068806880688068806880688
068806880688068806880688068806880688068806880688068806880688
068806880688068806880708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807860786078607860858085808580858
085808580858085808580858085808580858085808580858085808580858
085808580858085808580858085808580858085808580858085808580858
085808580858085808580858085808580858085808580858085808580858
085808580858085808580858085808580858085808580858085808580858
085808580858085808c108c1092709270927092709270927092709910991
0991099109910991099109e40a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a0a5a
0a5a0a5a0a5a0a5a0a5a0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aec0b650c0d0c0d
0c0d0c0d0c0d0c0d0c0d0c0d0c690cda0d7c0d7c0d7c0d7c0d7c0d7c0d7c
0d7c0dbf0e340ee00ee00ee00ee00ee00ee00ee00ee00f3a0f420f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f8c100710ad10ad10ad10ad10ad10ad10ad
10ad114a1227133813381338133813381338133813381341134a13531353
13531353135313531353135313531353135313531353139513fc148c148c
148c148c148c148c148c148c148c148c148c148c148c14cf153115d515d5
15d515d515d515d515d515d515de15e715f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
15f015f015f015f015f015f015f015f015f015f015f015f015f015f015f0
170217021702170217021702170217021702170217021702170217021702
170217021702170217021702170217021702170217021702170a170a1712
17121712171217121712178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d17ec17ec184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
184e184e184e184e184e184e184e184e184e184e184e184e184e184e184e
188a18dd194a194a194a194a194a194a194a194a194a194a194a194a194a
194a194a194a194a194a194a194a194a194a194a198519d21a3f1a3f1a3f
1a3f1a3f1a3f1a3f1a3f1a3f1a5e1a5e1a5e1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a
1a7a1a7a1a7a1a7a1a7a1a7a1a7a1a7a000000010000192a008000100059
000100020010002f006000000cf816e1000100010000002d022200000003
00000000021000000000000300000001000e021000000003000000020008
04d60000000300000003002e04b00000000300000004001804c600000003
00000005001804de0000000300000006001804f600000003000000070076
050e0000000300000008002a059200000003000000090020079600000003
0000000a02a00210000000030000000b005607b6000000030000000c002a
080c000000030000000d0e060836000000030000000e006c163c00010000
00000000010816a80001000000000001000717b000010000000000020004
19130001000000000003001719000001000000000004000c190b00010000
00000005000c19170001000000000006000c19230001000000000007003b
192f0001000000000008001516af00010000000000090010196a00010000
0000000a015017b0000100000000000b002b197a000100000000000c0015
19a5000100000000000d070319ba000100000000000e003620bd00030001
04090000021205840003000104090001000e021000030001040900020008
04d60003000104090003002e04b00003000104090004001804c600030001
04090005001804de0003000104090006001804f600030001040900070076
050e0003000104090008002a059200030001040900090020079600030001
0409000a02a00210000300010409000b005607b6000300010409000c002a
080c000300010409000d0e1820f3000300010409000e006c163c00a90020
00320030003100360020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e000d0048006500620072006500770020004f00700065006e
00540079007000650020004c00610079006f007500740020006c006f0067
0069006300200063006f0070007900720069006700680074002000a90020
00320030003000330020002600200032003000300037002c002000520061
006c00700068002000480061006e0063006f0063006b002000260020004a
006f0068006e00200048007500640073006f006e002e0020005400680069
00730020006c00610079006f007500740020006c006f0067006900630020
0066006f00720020004200690062006c006900630061006c002000480065
00620072006500770020006900730020006f00700065006e00200073006f
007500720063006500200073006f00660074007700610072006500200075
006e00640065007200200074006800650020004d004900540020004c0069
00630065006e00730065003b002000730065006500200065006d00620065
00640064006500640020006c006900630065006e00730065002000640065
0073006300720069007000740069006f006e00200066006f007200200064
0065007400610069006c0073002e00430061006c00690062007200690020
00690073002000610020006d006f006400650072006e002000730061006e
0073002000730065007200690066002000660061006d0069006c00790020
007700690074006800200073007500620074006c006500200072006f0075
006e00640069006e006700730020006f006e0020007300740065006d0073
00200061006e006400200063006f0072006e006500720073002e00200049
00740020006600650061007400750072006500730020007200650061006c
0020006900740061006c006900630073002c00200073006d0061006c006c
00200063006100700073002c00200061006e00640020006d0075006c0074
00690070006c00650020006e0075006d006500720061006c002000730065
00740073002e0020004900740073002000700072006f0070006f00720074
0069006f006e007300200061006c006c006f007700200068006900670068
00200069006d007000610063007400200069006e00200074006900670068
0074006c007900200073006500740020006c0069006e006500730020006f
0066002000620069006700200061006e006400200073006d0061006c006c
0020007400650078007400200061006c0069006b0065002e002000430061
006c0069006200720069002700730020006d0061006e0079002000630075
007200760065007300200061006e006400200074006800650020006e0065
007700200072006100730074006500720069007300650072002000740065
0061006d00200075007000200069006e0020006200690067006700650072
002000730069007a0065007300200074006f002000720065007600650061
006c002000610020007700610072006d00200061006e006400200073006f
006600740020006300680061007200610063007400650072002e004d0069
00630072006f0073006f00660074003a002000430061006c006900620072
006900200042006f006c006400560065007200730069006f006e00200036
002e0031003800430061006c0069006200720069002d0042006f006c0064
00430061006c006900620072006900200069007300200061002000740072
006100640065006d00610072006b0020006f006600200074006800650020
004d006900630072006f0073006f00660074002000670072006f00750070
0020006f006600200063006f006d00700061006e006900650073002e00a9
002000320030003100360020004d006900630072006f0073006f00660074
00200043006f00720070006f0072006100740069006f006e002e00200041
006c006c0020005200690067006800740073002000520065007300650072
007600650064002e000d000a0048006500620072006500770020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200063006f00700079007200690067006800740020
00a9002000320030003000330020002600200032003000300037002c0020
00520061006c00700068002000480061006e0063006f0063006b00200026
0020004a006f0068006e00200048007500640073006f006e002e00200054
0068006900730020006c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
0048006500620072006500770020006900730020006f00700065006e0020
0073006f007500720063006500200073006f006600740077006100720065
00200075006e00640065007200200074006800650020004d004900540020
004c006900630065006e00730065003b002000730065006500200065006d
0062006500640064006500640020006c006900630065006e007300650020
006400650073006300720069007000740069006f006e00200066006f0072
002000640065007400610069006c0073002e004c00750063002800610073
0029002000640065002000470072006f006f00740068007400740070003a
002f002f007700770077002e006d006900630072006f0073006f00660074
002e0063006f006d002f007400790070006f006700720061007000680079
002f006300740066006f006e007400730068007400740070003a002f002f
006c00750063006100730066006f006e00740073002e0063006f006d004d
006900630072006f0073006f0066007400200073007500700070006c0069
0065006400200066006f006e0074002e00200059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
00200074006f0020006300720065006100740065002c0020006400690073
0070006c00610079002c00200061006e00640020007000720069006e0074
00200063006f006e00740065006e00740020006100730020007000650072
006d0069007400740065006400200062007900200074006800650020006c
006900630065006e007300650020007400650072006d00730020006f0072
0020007400650072006d00730020006f00660020007500730065002c0020
006f006600200074006800650020004d006900630072006f0073006f0066
0074002000700072006f0064007500630074002c00200073006500720076
006900630065002c0020006f007200200063006f006e00740065006e0074
00200069006e002000770068006900630068002000740068006900730020
0066006f006e0074002000770061007300200069006e0063006c00750064
00650064002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e00200041006e00790020006f0074006800650072002000750073
0065002000690073002000700072006f0068006900620069007400650064
002e000d000d00540068006500200066006f006c006c006f00770069006e
00670020006c006900630065006e00730065002c00200062006100730065
00640020006f006e00200074006800650020004d004900540020006c0069
00630065006e00730065002000280068007400740070003a002f002f0065
006e002e00770069006b006900700065006400690061002e006f00720067
002f00770069006b0069002f004d00490054005f004c006900630065006e
007300650029002c0020006100700070006c00690065007300200074006f
00200074006800650020004f00700065006e00540079007000650020004c
00610079006f007500740020006c006f00670069006300200066006f0072
0020004200690062006c006900630061006c002000480065006200720065
00770020201c004c00610079006f007500740020004c006f006700690063
201d0020006100730020006a006f0069006e0074006c0079002000640065
00760065006c006f007000650064002000620079002000520061006c0070
0068002000480061006e0063006f0063006b00200061006e00640020004a
006f0068006e00200048007500640073006f006e002e0020000d000d0050
00650072006d0069007300730069006f006e002000690073002000680065
00720065006200790020006700720061006e007400650064002c00200066
0072006500650020006f00660020006300680061007200670065002c0020
0074006f00200061006e007900200070006500720073006f006e0020006f
0062007400610069006e0069006e00670020006100200063006f00700079
0020006f006600200074006800650020004f00700065006e005400790070
00650020004c00610079006f007500740020006c006f0067006900630020
0066006f00720020004200690062006c006900630061006c002000480065
006200720065007700200061006e00640020006100730073006f00630069
006100740065006400200064006f00630075006d0065006e007400610074
0069006f006e002000660069006c00650073002000280074006800650020
201c004c00610079006f007500740020004c006f00670069006300200053
006f006600740077006100720065201d0029002c00200074006f00200064
00650061006c00200069006e00200074006800650020004c00610079006f
007500740020004c006f00670069006300200053006f0066007400770061
0072006500200077006900740068006f0075007400200072006500730074
00720069006300740069006f006e002c00200069006e0063006c00750064
0069006e006700200077006900740068006f007500740020006c0069006d
00690074006100740069006f006e00200074006800650020007200690067
00680074007300200074006f0020007500730065002c00200063006f0070
0079002c0020006d006f0064006900660079002c0020006d006500720067
0065002c0020007000750062006c006900730068002c0020006400690073
0074007200690062007500740065002c0020007300750062006c00690063
0065006e00730065002c00200061006e0064002f006f0072002000730065
006c006c00200063006f00700069006500730020006f0066002000740068
00650020004c00610079006f007500740020004c006f0067006900630020
0053006f006600740077006100720065002c00200061006e006400200074
006f0020007000650072006d0069007400200070006500720073006f006e
007300200074006f002000770068006f006d00200074006800650020004c
00610079006f007500740020004c006f00670069006300200053006f0066
007400770061007200650020006900730020006600750072006e00690073
00680065006400200074006f00200064006f00200073006f002c00200073
00750062006a00650063007400200074006f002000740068006500200066
006f006c006c006f00770069006e006700200063006f006e006400690074
0069006f006e0073003a000d000d005400680065002000610062006f0076
006500200063006f00700079007200690067006800740020006e006f0074
00690063006500200061006e006400200074006800690073002000700065
0072006d0069007300730069006f006e0020006e006f0074006900630065
0020007300680061006c006c00200062006500200069006e0063006c0075
00640065006400200069006e00200061006c006c00200063006f00700069
006500730020006f00720020007300750062007300740061006e00740069
0061006c00200070006f007200740069006f006e00730020006f00660020
0074006800650020004c00610079006f007500740020004c006f00670069
006300200053006f006600740077006100720065002e000d000d00540048
004500200053004f00460054005700410052004500200049005300200050
0052004f0056004900440045004400200027004100530020004900530027
002c00200057004900540048004f00550054002000570041005200520041
004e005400590020004f004600200041004e00590020004b0049004e0044
002c002000450058005000520045005300530020004f005200200049004d
0050004c004900450044002c00200049004e0043004c005500440049004e
004700200042005500540020004e004f00540020004c0049004d00490054
0045004400200054004f0020005400480045002000570041005200520041
004e00540049004500530020004f00460020004d00450052004300480041
004e0054004100420049004c004900540059002c0020004600490054004e
00450053005300200046004f005200200041002000500041005200540049
00430055004c0041005200200050005500520050004f0053004500200041
004e00440020004e004f004e0049004e004600520049004e00470045004d
0045004e0054002e00200049004e0020004e004f0020004500560045004e
00540020005300480041004c004c00200054004800450020004100550054
0048004f005200530020004f005200200043004f00500059005200490047
0048005400200048004f004c00440045005200530020004200450020004c
004900410042004c004500200046004f005200200041004e005900200043
004c00410049004d002c002000440041004d00410047004500530020004f
00520020004f00540048004500520020004c0049004100420049004c0049
00540059002c0020005700480045005400480045005200200049004e0020
0041004e00200041004300540049004f004e0020004f004600200043004f
004e00540052004100430054002c00200054004f005200540020004f0052
0020004f00540048004500520057004900530045002c0020004100520049
00530049004e0047002000460052004f004d002c0020004f005500540020
004f00460020004f005200200049004e00200043004f004e004e00450043
00540049004f004e00200057004900540048002000540048004500200053
004f0046005400570041005200450020004f005200200054004800450020
0055005300450020004f00520020004f0054004800450052002000440045
0041004c0049004e0047005300200049004e002000540048004500200053
004f004600540057004100520045002e000d0068007400740070003a002f
002f007700770077002e006d006900630072006f0073006f00660074002e
0063006f006d002f007400790070006f006700720061007000680079002f
0066006f006e00740073002f00640065006600610075006c0074002e0061
007300700078a92032303136204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c205269676874732052657365727665642e0d486562
726577204f70656e54797065204c61796f7574206c6f67696320636f7079
726967687420a92032303033202620323030372c2052616c70682048616e
636f636b2026204a6f686e20487564736f6e2e2054686973206c61796f75
74206c6f67696320666f72204269626c6963616c20486562726577206973
206f70656e20736f7572636520736f66747761726520756e646572207468
65204d4954204c6963656e73653b2073656520656d626564646564206c69
63656e7365206465736372697074696f6e20666f722064657461696c732e
43616c696272692069732061206d6f6465726e2073616e73207365726966
2066616d696c79207769746820737562746c6520726f756e64696e677320
6f6e207374656d7320616e6420636f726e6572732e204974206665617475
726573207265616c206974616c6963732c20736d616c6c20636170732c20
616e64206d756c7469706c65206e756d6572616c20736574732e20497473
2070726f706f7274696f6e7320616c6c6f77206869676820696d70616374
20696e2074696768746c7920736574206c696e6573206f66206269672061
6e6420736d616c6c207465787420616c696b652e2043616c696272692773
206d616e792063757276657320616e6420746865206e6577207261737465
7269736572207465616d20757020696e206269676765722073697a657320
746f2072657665616c2061207761726d20616e6420736f66742063686172
61637465722e4d6963726f736f66743a2043616c6962726920426f6c6456
657273696f6e20362e313843616c696272692d426f6c6443616c69627269
20697320612074726164656d61726b206f6620746865204d6963726f736f
66742067726f7570206f6620636f6d70616e6965732e4c75632861732920
64652047726f6f74687474703a2f2f7777772e6d6963726f736f66742e63
6f6d2f7479706f6772617068792f6374666f6e7473687474703a2f2f6c75
636173666f6e74732e636f6d4d6963726f736f667420737570706c696564
20666f6e742e20596f75206d617920757365207468697320666f6e742074
6f206372656174652c20646973706c61792c20616e64207072696e742063
6f6e74656e74206173207065726d697474656420627920746865206c6963
656e7365207465726d73206f72207465726d73206f66207573652c206f66
20746865204d6963726f736f66742070726f647563742c20736572766963
652c206f7220636f6e74656e7420696e207768696368207468697320666f
6e742077617320696e636c756465642e20596f75206d6179206f6e6c7920
28692920656d626564207468697320666f6e7420696e20636f6e74656e74
206173207065726d69747465642062792074686520656d62656464696e67
207265737472696374696f6e7320696e636c7564656420696e2074686973
20666f6e743b20616e6420286969292074656d706f726172696c7920646f
776e6c6f6164207468697320666f6e7420746f2061207072696e74657220
6f72206f74686572206f75747075742064657669636520746f2068656c70
207072696e7420636f6e74656e742e20416e79206f746865722075736520
69732070726f686962697465642e0d0d54686520666f6c6c6f77696e6720
6c6963656e73652c206261736564206f6e20746865204d4954206c696365
6e73652028687474703a2f2f656e2e77696b6970656469612e6f72672f77
696b692f4d49545f4c6963656e7365292c206170706c69657320746f2074
6865204f70656e54797065204c61796f7574206c6f67696320666f722042
69626c6963616c2048656272657720d24c61796f7574204c6f676963d320
6173206a6f696e746c7920646576656c6f7065642062792052616c706820
48616e636f636b20616e64204a6f686e20487564736f6e2e200d0d506572
6d697373696f6e20697320686572656279206772616e7465642c20667265
65206f66206368617267652c20746f20616e7920706572736f6e206f6274
61696e696e67206120636f7079206f6620746865204f70656e5479706520
4c61796f7574206c6f67696320666f72204269626c6963616c2048656272
657720616e64206173736f63696174656420646f63756d656e746174696f
6e2066696c6573202874686520d24c61796f7574204c6f67696320536f66
7477617265d3292c20746f206465616c20696e20746865204c61796f7574
204c6f67696320536f66747761726520776974686f757420726573747269
6374696f6e2c20696e636c7564696e6720776974686f7574206c696d6974
6174696f6e207468652072696768747320746f207573652c20636f70792c
206d6f646966792c206d657267652c207075626c6973682c206469737472
69627574652c207375626c6963656e73652c20616e642f6f722073656c6c
20636f70696573206f6620746865204c61796f7574204c6f67696320536f
6674776172652c20616e6420746f207065726d697420706572736f6e7320
746f2077686f6d20746865204c61796f7574204c6f67696320536f667477
617265206973206675726e697368656420746f20646f20736f2c20737562
6a65637420746f2074686520666f6c6c6f77696e6720636f6e646974696f
6e733a0d0d5468652061626f766520636f70797269676874206e6f746963
6520616e642074686973207065726d697373696f6e206e6f746963652073
68616c6c20626520696e636c7564656420696e20616c6c20636f70696573
206f72207375627374616e7469616c20706f7274696f6e73206f66207468
65204c61796f7574204c6f67696320536f6674776172652e0d0d54484520
534f4654574152452049532050524f564944454420274153204953272c20
574954484f55542057415252414e5459204f4620414e59204b494e442c20
45585052455353204f5220494d504c4945442c20494e434c5544494e4720
425554204e4f54204c494d4954454420544f205448452057415252414e54
494553204f46204d45524348414e544142494c4954592c204649544e4553
5320464f52204120504152544943554c415220505552504f534520414e44
204e4f4e494e4652494e47454d454e542e20494e204e4f204556454e5420
5348414c4c2054484520415554484f5253204f5220434f50595249474854
20484f4c44455253204245204c4941424c4520464f5220414e5920434c41
494d2c2044414d41474553204f52204f54484552204c494142494c495459
2c205748455448455220494e20414e20414354494f4e204f4620434f4e54
524143542c20544f5254204f52204f54484552574953452c204152495349
4e472046524f4d2c204f5554204f46204f5220494e20434f4e4e45435449
4f4e20574954482054484520534f465457415245204f5220544845205553
45204f52204f54484552204445414c494e475320494e2054484520534f46
54574152452e0d687474703a2f2f7777772e6d6963726f736f66742e636f
6d2f7479706f6772617068792f666f6e74732f64656661756c742e617370
78004d006900630072006f0073006f006600740020007300750070007000
6c00690065006400200066006f006e0074002e00200059006f0075002000
6d0061007900200075007300650020007400680069007300200066006f00
6e007400200074006f0020006300720065006100740065002c0020006400
6900730070006c00610079002c00200061006e0064002000700072006900
6e007400200063006f006e00740065006e00740020006100730020007000
650072006d00690074007400650064002000620079002000740068006500
20006c006900630065006e007300650020007400650072006d0073002000
6f00720020007400650072006d00730020006f0066002000750073006500
2c0020006f006600200074006800650020004d006900630072006f007300
6f00660074002000700072006f0064007500630074002c00200073006500
720076006900630065002c0020006f007200200063006f006e0074006500
6e007400200069006e002000770068006900630068002000740068006900
7300200066006f006e0074002000770061007300200069006e0063006c00
75006400650064002e00200059006f00750020006d006100790020006f00
6e006c0079002000280069002900200065006d0062006500640020007400
680069007300200066006f006e007400200069006e00200063006f006e00
740065006e00740020006100730020007000650072006d00690074007400
650064002000620079002000740068006500200065006d00620065006400
640069006e00670020007200650073007400720069006300740069006f00
6e007300200069006e0063006c007500640065006400200069006e002000
7400680069007300200066006f006e0074003b00200061006e0064002000
28006900690029002000740065006d0070006f0072006100720069006c00
7900200064006f0077006e006c006f006100640020007400680069007300
200066006f006e007400200074006f002000610020007000720069006e00
74006500720020006f00720020006f00740068006500720020006f007500
74007000750074002000640065007600690063006500200074006f002000
680065006c00700020007000720069006e007400200063006f006e007400
65006e0074002e00200041006e00790020006f0074006800650072002000
7500730065002000690073002000700072006f0068006900620069007400
650064002e000d000a000d000a00540068006500200066006f006c006c00
6f00770069006e00670020006c006900630065006e00730065002c002000
6200610073006500640020006f006e00200074006800650020004d004900
540020006c006900630065006e0073006500200028006800740074007000
3a002f002f0065006e002e00770069006b00690070006500640069006100
2e006f00720067002f00770069006b0069002f004d00490054005f004c00
6900630065006e007300650029002c0020006100700070006c0069006500
7300200074006f00200074006800650020004f00700065006e0054007900
7000650020004c00610079006f007500740020006c006f00670069006300
200066006f00720020004200690062006c006900630061006c0020004800
6500620072006500770020201c004c00610079006f007500740020004c00
6f006700690063201d0020006100730020006a006f0069006e0074006c00
7900200064006500760065006c006f007000650064002000620079002000
520061006c00700068002000480061006e0063006f0063006b0020006100
6e00640020004a006f0068006e00200048007500640073006f006e002e00
20000d000a000d000a005000650072006d0069007300730069006f006e00
200069007300200068006500720065006200790020006700720061006e00
7400650064002c002000660072006500650020006f006600200063006800
61007200670065002c00200074006f00200061006e007900200070006500
720073006f006e0020006f0062007400610069006e0069006e0067002000
6100200063006f007000790020006f006600200074006800650020004f00
700065006e00540079007000650020004c00610079006f00750074002000
6c006f00670069006300200066006f00720020004200690062006c006900
630061006c002000480065006200720065007700200061006e0064002000
6100730073006f00630069006100740065006400200064006f0063007500
6d0065006e0074006100740069006f006e002000660069006c0065007300
2000280074006800650020201c004c00610079006f007500740020004c00
6f00670069006300200053006f006600740077006100720065201d002900
2c00200074006f0020006400650061006c00200069006e00200074006800
650020004c00610079006f007500740020004c006f006700690063002000
53006f00660074007700610072006500200077006900740068006f007500
740020007200650073007400720069006300740069006f006e002c002000
69006e0063006c007500640069006e006700200077006900740068006f00
7500740020006c0069006d00690074006100740069006f006e0020007400
680065002000720069006700680074007300200074006f00200075007300
65002c00200063006f00700079002c0020006d006f006400690066007900
2c0020006d0065007200670065002c0020007000750062006c0069007300
68002c00200064006900730074007200690062007500740065002c002000
7300750062006c006900630065006e00730065002c00200061006e006400
2f006f0072002000730065006c006c00200063006f007000690065007300
20006f006600200074006800650020004c00610079006f00750074002000
4c006f00670069006300200053006f006600740077006100720065002c00
200061006e006400200074006f0020007000650072006d00690074002000
70006500720073006f006e007300200074006f002000770068006f006d00
200074006800650020004c00610079006f007500740020004c006f006700
69006300200053006f006600740077006100720065002000690073002000
6600750072006e0069007300680065006400200074006f00200064006f00
200073006f002c0020007300750062006a00650063007400200074006f00
2000740068006500200066006f006c006c006f00770069006e0067002000
63006f006e0064006900740069006f006e0073003a000d000a000d000a00
5400680065002000610062006f0076006500200063006f00700079007200
690067006800740020006e006f007400690063006500200061006e006400
2000740068006900730020007000650072006d0069007300730069006f00
6e0020006e006f00740069006300650020007300680061006c006c002000
62006500200069006e0063006c007500640065006400200069006e002000
61006c006c00200063006f00700069006500730020006f00720020007300
750062007300740061006e007400690061006c00200070006f0072007400
69006f006e00730020006f006600200074006800650020004c0061007900
6f007500740020004c006f00670069006300200053006f00660074007700
6100720065002e000d000a000d000a00540048004500200053004f004600
540057004100520045002000490053002000500052004f00560049004400
45004400200027004100530020004900530027002c002000570049005400
48004f00550054002000570041005200520041004e005400590020004f00
4600200041004e00590020004b0049004e0044002c002000450058005000
520045005300530020004f005200200049004d0050004c00490045004400
2c00200049004e0043004c005500440049004e0047002000420055005400
20004e004f00540020004c0049004d004900540045004400200054004f00
20005400480045002000570041005200520041004e005400490045005300
20004f00460020004d00450052004300480041004e005400410042004900
4c004900540059002c0020004600490054004e0045005300530020004600
4f00520020004100200050004100520054004900430055004c0041005200
200050005500520050004f0053004500200041004e00440020004e004f00
4e0049004e004600520049004e00470045004d0045004e0054002e002000
49004e0020004e004f0020004500560045004e0054002000530048004100
4c004c002000540048004500200041005500540048004f00520053002000
4f005200200043004f005000590052004900470048005400200048004f00
4c00440045005200530020004200450020004c004900410042004c004500
200046004f005200200041004e005900200043004c00410049004d002c00
2000440041004d00410047004500530020004f00520020004f0054004800
4500520020004c0049004100420049004c004900540059002c0020005700
480045005400480045005200200049004e00200041004e00200041004300
540049004f004e0020004f004600200043004f004e005400520041004300
54002c00200054004f005200540020004f00520020004f00540048004500
520057004900530045002c002000410052004900530049004e0047002000
460052004f004d002c0020004f005500540020004f00460020004f005200
200049004e00200043004f004e004e0045004300540049004f004e002000
57004900540048002000540048004500200053004f004600540057004100
5200450020004f0052002000540048004500200055005300450020004f00
520020004f00540048004500520020004400450041004c0049004e004700
5300200049004e002000540048004500200053004f004600540057004100
520045002e000d000a000000b20903eb411d03430001003b03410001008b
0330009b033000020004032f0064032f0074032f00d4032f0004032d032a
0038001f032c032a0038001f032b032ab2381f24bf032a00a4032a00b403
2a0003ffc0032ab2232746b9ffc0032ab21c20464163033c0038033b0055
033a00380339005503380038033700550336003803350055033400380333
005503230038032200550321003803200055002b03400001006b03400001
033d003803220055006b033b000100240331005403310002002403310034
03310054033100f403310004001403270044032700e40327000300040327
002403270044032700740327008403270094032700d4032700f403270008
00a403220001003403200001001403200024032000440320005403200074
032000840320000602f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802
f6b21e2c1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b2
1e2c1fb802f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b
1fb802edb21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb8
02e9b21e2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5
b21e2c1fb802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d
121fb802e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1f
b802dcb21d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802
d8b21d2f1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b2
1d2f1fb802d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f
1fb802cfb21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb8
02cbb21d121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7
b21d2f1fb802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d
2f1fb802c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121f
b802beb21d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802
bab21d2f1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b2
1d2f1fb802b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f
1fb802b1b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb8
02adb21c331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9
b21c311fb802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c
321fb802a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331f
b802a0b21c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb802
9cb21c311fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b2
1c321fb80297b21c321fb80296b21c321fb80295b21c331fb80294b21c33
1fb80293b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8
028fb21c331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028b
b21c321fb8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c
331fb80286b21c331fb80285b21c331fb80284b21c331fb80283b21c331f
b80282b21b341fb80281b21b341fb80280b21b341fb8027fb21b341fb802
7eb21b341fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab2
1b341fb80279b21b341fb80278b21b341fb80277b21b341fb80276b21b34
1fb80275b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb8
0271b21b341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026d
b21a351fb8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a
351fb80268b21a351fb80267b21a351fb80266b21a351fb80265b21a351f
b80264b21a351fb80263b21a351fb80262b21a351fb80261b21a351fb802
60b21a351fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb2
1a351fb8025bb21a351fb8025ab21a351fb80259b219371fb80258b21937
1fb80257b219371fb80256b219371fb80255b219371fb80254b219371fb8
0253b219371fb80252b219371fb80251b219371fb80250b219371fb8024f
b219371fb8024eb219371fb8024db219371fb8024cb219371fb8024bb219
371fb8024ab219371fb80249b219371fb80248b219371fb80247b219371f
b80246b219371fb80245b219371fb80244b219371fb80243b219371fb802
42b219371fb80241b219371fb80240b219371fb8023fb219371fb8023eb2
19371fb8023db219371fb8023cb219371fb8023bb219371fb8023ab21937
1fb80239b218391fb80238b218391fb80237b218391fb80236b218391fb8
0235b218391fb80234b218391fb80233b218391fb80232b218391fb80231
b218391fb80230b218391fb80301b2182e1fb8022fb218391fb8022eb218
391fb8022db218391fb8022cb218391fb8022bb218391fb8022ab218391f
b80229b218391fb80228b218391fb80227b218391fb80226b218391fb802
25b2173b1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2
173b1fb80220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b
1fb8021cb2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb8
0218b2173b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214
b2173a1fb80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b217
3b1fb8020fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1f
b8020bb2173b1fb8020ab2173b1fb80209b217321fb80208b217321fb802
07b2173b1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2
173b1fb80202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b
1fb801feb2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb8
01fab2173b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6
b2173a1fb801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b217
3b1fb801f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1f
b801edb2173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801
e9b2173b1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b2
16231fb801e4b216371fb801e3b216371fb801e2b216381fb801e1b21638
1fb801e0b216431fb801dfb216441fb801deb216441fb801ddb216441fb8
01dcb216451fb801dbb216461fb801dab216461fb801d9b216461fb801d8
b216231fb801d7b216231fb801d6b216381fb801d5b216431fb801d4b216
431fb801d3b216431fb801d2b216441fb801d1b216461fb801d0b216461f
b801cfb216461fb801ceb216461fb801cdb216461fb801ccb216461fb801
cbb216431fb801cab216231fb801c9b216231fb801c8b216371fb801c7b2
16371fb801c6b216381fb801c5b216421fb801c4b216431fb801c3b21644
1fb801c2b216451fb801c1b216461fb801c0b216461fb801bfb216461fb8
01beb216461fb801bdb216461fb801bcb216461fb801bbb216461fb801ba
b216371fb801b9b216381fb801b8b216421fb801b7b216431fb801b6b216
431fb801b5b216431fb801b4b216441fb801b3b216441fb801b2b216441f
b801b1b216451fb801b0b216451fb801afb216451fb801aeb216461fb801
adb216461fb801acb216461fb801abb216461fb801aab216461fb801a9b2
15341fb801a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e
1fb801a4b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb8
01a0b2154e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019c
b215401fb8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b215
4f1fb80197b2154f1fb80196b215501fb80195b215521fb80194b215521f
b80193b215521fb80192b215411fb80191b2154f1fb80190b215501fb801
8fb215501fb8018eb215511fb8018db215521fb8018cb215521fb8018bb2
15521fb8018ab214581fb80189b214591fb80188b2145c1fb80187b2145d
1fb80186b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb8
0182b2145d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1f
c10c4e1fc00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b
561fad0b561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561f
a60b561fa50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b
561f9e0a681f9a0a681f990a681f980a681f970a681f960a681f950a681f
940a681f930a681f920a681f910a681f9009681f8f09681f8e09681f8d09
681f8c09681f410902fc02fa0056001f02fb02fa0068001f017fb213321f
b8017eb212371fb80174b212371fb80173b211421fb80172b211421fb801
71b211421fb80170b211421fb8016fb211421fb8016eb211421fb8016db2
11421fb8016cb211421fb8016bb211421fb8016ab211421fb8013cb21142
1fb8013bb210421fb8013ab210421fb80139b210421fb80138b210421fb8
0137b210421fb80136b210421fb80135b210421fb80134b210421fb80133
b210421fb80132b20f451fb80131b20f451fb80130b20f451fb80112b20f
451fb80111b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451f
b8010db20e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb801
09b20e481fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a
1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd
0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b56
1fbd0b561fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213
321fb8017ab211401fb80179b211421fb80178b211421fb80177b211421f
b80176b211421fb80175b211421fb80143b211421fb80142b210421fb801
41b210421fb80140b210421fb8013fb210421fb8013eb210421fb8013db2
0f451fb80115b20f451fb80114b20f451fb80113b20f451fb903030302b2
401fa4be030200b4030200c4030200030300b213321fb8017bb213321fb8
0153b212371fb80152b211401fb80151b211401fb80150b211401fb8014f
b211401fb8014eb211401fb8014db211401fb8014cb211401fb8014bb211
401fb8014ab211401fb80149b211401fb80148b211401fb80147b211401f
b80146b211401fb80145b211401fb80144b211401fb80122b211401fb801
21b210421fb80120b210421fb8011fb210421fb8011eb210421fb8011db2
10421fb8011cb210421fb8011bb210421fb8011ab210421fb80119b21042
1fb80118b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f45
1ffb0f451ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff4
0e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a
1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc9
0c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e
1fb70b561fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212
371fb8017db212371fb8017cb212371fb80169b2112e1fb80168b2112e1f
b80167b211401fb80166b211401fb80165b211401fb80164b211401fb801
63b211401fb80162b211401fb80161b211401fb80160b211401fb8015fb2
11401fb8015eb211401fb8015db211401fb8015cb211401fb8015bb21140
1fb8015ab211401fb80159b211401fb80158b211401fb80157b211401fb8
0156b211401fb80155b211401fb80154b211401fb8012fb211401fb8012e
b210421fb8012db210421fb8012cb210421fb8012bb210421fb8012ab210
421fb80129b210421fb80128b210421fb80127b210421fb80126b210421f
b80125b20f451fb80124b20f451fb80123b20f451fb80105b20f451fb801
04b20f451fb80103b20f451fb80102b20f451fb80101b20e481fb8010040
a20e481fff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c
4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f
84032e1f83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d
030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948
775578ab77550b77010c764875555475e475f47503147554756475747594
75d475e47507a475b475c47503b8ffc0401275383b468075907502147574
75020075010fb8ffc04021750b0e467448725573ab725504723472023bf4
7201e07201023072015072607202b8ffc0b372242846b8ffc0403572161a
461072307240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f
6f02af6fbf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002
ffb2030a6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568
ab6755662e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a
555bab5a55592e58555703251f562e545555ab5455532e515552ab51554f
2e4e554e03251f4d2e4b554cab4b554a2e485549ab4855504801472e4655
4503361f001f01001e01001e701e801ef01e040b601d701d02701de01df0
1d03701cf01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f
198f199f19af19050f198f199f19030c7012801202701180110230114011
d011e011040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01
af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f
0d40472f0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f
0c5f0c039f0c01400c262946ef0aff0a02400a242746ef09ff0902ff0901
0003012001010001100120010308b8ffc0b401151f4603bd010001000005
0001019000542b4bb807ff524bb008505bb00188b02553b00188b040515a
b00688b000555a5b58b101018e59b101024354b0144b515a58b101018e59
858d8d001d424bb01d5358b203a0a01d42594bb0805358b20340401d4259
4bb0ff5358b20300001d42592b5e73757373742b732b73742b2b73745e73
2b5e7374757374755e73747573015e7374737475757473745e737473002b
2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73
732b2b7374752b2b732b2b73755f75755e732b2b2b5e7373732b7374752b
5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b0073747373747374732b73742b
2b2b2b2b2b2b2b2b732b2b2b73737373185f5e00000000>
[13557 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> PBAAAA+CIDFont+F1 AddT42Char 
2 8538 1005 <00010094000003b00517002e00b3b10102435558400d0929010928010827
0101120130b8ffc040090f024d403001030029b80292b31e180b11b8ffde
b50f024d111312b8017d40092352290f10010b0510b8012bb24006540018
3f1aed5f5e5d323ffdcd012f2bcdc433fdcd30315f5d2b005d015d5d5d1b
4018292801292901092901092801082701011201403001031312b8017d40
092352290f10010b0510b8012bb240065400183f1aed5f5e5d323ffdcd30
31015f5d005d015d5d5d5d5d5925140e022321222e0235343e0233331107
0606262635343e0237253e0333321e02151133321e0203b0060b0e09fd36
080e0b06050b0e09f1d0171d110602080e0c0116050f18271f262f1808d3
090f0b05641c27170a0a17271c1d27180b034a730b05112a26181f160e08
b40405030103070c09fbd30b1827>PBAAAA+CIDFont+F1 AddT42Char 
2 2712 271 <0002007effe904000570002a003d0094b10102435558b20a2136bb026000
15002b0284400900150a363521040530b8ffe8b40b0f014c30b8014b400d
264a1b46104c39180b0f014c39b8014ab240054d00183f1aed2b3f3f3fed
2b121739012fd4ed10ed323930311bb60a363521040530b8ffe8b40b0f01
4c30b8014b400d264a1b46104c39180b0f014c39b8014ab240054d00183f
1aed2b3f3f3fed2b12173930315901140e0223222e022715140e0223222e
023511343e0233321e0215113e0333321e0205342e0223220e0207111616
33323e02040034628f5b2d4e4745240b192a1e1f29190a0c1d302525301d
0c2244444828638a5728fefb112a4333193033361e35613531442d1401ec
77be864811263a29610b0f0a04040a0f0b05230a100b06060b100afe1322
301f0e4f86b375396a52310e223628fed84447325066>PBAAAA+CIDFont+F1 AddT42Char 
2 3344 364 <0001007efffa03bb057000340061b10102435558bf003102600022000c02
600016002302b6b32d2d160ab802b7400e400016220b0528491c46114c05
4c00183f3f3f3f123939012fd41aed12392fed10fd32e430311b400b220b
0528491c46114c054c00183f3f3f3f12393930315925140e0223222e0227
0111140e0223222e023511343e0233321e021511013e0333321e02151406
070101161603bb0b1d32282933211207fed70c1d302525301d0c0c1d3025
25301d0c0108081421312625331f0c0f0ffefb012e0c0b210a0f09050409
100d01d6fe280a0f0a05050a0f0a05230a100b06060b100afcf101630c12
0a05050a0f0b0f2213fed8fe2d141d00>PBAAAA+CIDFont+F1 AddT42Char 
2 3852 400 <00010049ffe902f203d7004900e7b10102435558b90041022eb524322432
0c1bb802444022000c042e012ee4370b0a010ae71137400b014d10372037
020337113711160f3c013cb8fff0401b0b0f014c3ce4411b05294a16100c
0d014c001601100416f240054d00183f1aed5f5e5d2b3f123939ed2b5d11
39392f2f5f5d2b10ed5d10ed5d012fd4ed1239392f2fed30311b4020042e
012ee4370b0a010ae71137400b014d10372037020337113711160f3c013c
b8fff0401b0b0f014c3ce4411b05294a16100c0d014c001601100416f240
054d00183f1aed5f5e5d2b3f123939ed2b5d1139392f2f5f5d2b10ed5d10
ed5d30315901140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0602f239688e5332
5b4830160c04080c090b2b40553622352714253d4d514d3d25325e87542a
4f402c1308040303070c080926394b3022322010263e4f514f3e26011e4c
744e270f1718152d2c1d231507191e1a0e1a281a1e2b201c222c405a3f40
6b4c2a0c12150f0f151f171b2214071518150e1a23141f2a201c212c4059
>PBAAAA+CIDFont+F1 AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3031011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>PBAAAA+CIDFont+F1 AddT42Char 
PBAAAA+CIDFont+F1 /CharStrings get begin
/space 3 def
/one 1005 def
/b 271 def
/k 364 def
/s 400 def
end
PBAAAA+CIDFont+F1 /Encoding get
dup 32 /space put
dup 49 /one put
dup 98 /b put
dup 107 /k put
dup 115 /s put
pop
end
%ADOEndSubsetFont
/AHMWFN+CIDFont+F1 /PBAAAA+CIDFont+F1 findfont ct_VMDictPut
/AHMWFN+CIDFont+F1*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 48{/.notdef}rp /b 8{/.notdef}rp /k 
7{/.notdef}rp /s 140{/.notdef}rp]
AHMWFN+CIDFont+F1 nf
AHMWFN+CIDFont+F1*1 [8.04004 0 0 -8.04004 0 0 ]msf
96.4902 152.516 mo
(skb 1)
[3.21597 3.85931 4.18073 1.84918 0 ]xsh
gsave
153.131 143.041 mo
184.331 143.041 li
184.331 157.201 li
153.131 157.201 li
cp
eclp
152.891 157.441 mo
184.571 157.441 li
184.571 142.801 li
152.891 142.801 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[31.68 0 0 14.64 137.182 -85.4409 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 122 
/M[1 0 0 -122 0 122 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-"9\i1"9\i1"9\i1"U,&6
"U,&5"U,&5#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)!s8W-!s8W-!s8W-"9\i2
"9\i1"9\i1"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)!s8W-!s8W-!s8W-"9\i2
"9\i1"9\i1"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
153.131 157.201 mo
184.331 157.201 li
184.331 143.041 li
153.131 143.041 li
153.131 157.201 li
cp
.67657 .608606 .594385 .472297 cmyk
@
0 .990631 1 .000396735 cmyk
%ADOBeginSubsetFont: PBAAAA+CIDFont+F1 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CIDFont+F1 gcheck setglobal} if
2 8852 1006 <00010058000003bc0525003e0110b10102435558400e042c01042b01093a
010939010b40b8ffc0b60f024d00400116b802eeb633253325330039ba02
ee000bffea400a0f024d000b010f030b2ab80169b61138392020391bb8ff
e8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e531039180b0f
014c39b80159b240065400183f1aed2b323f123939ed2b2b11392f123939
ed012f5f5e5d2bedcd39392f2f10ed30315d2b005e5d5d015d5d1b401304
2c01042b01093a010939010b0040010f032ab80169b61138392020391bb8
ffe8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e531039180b
0f014c39b80159b240065400183f1aed2b323f123939ed2b2b11392f1239
39ed3031015f5e5d005e5d5d015d5d5925140e022321222e0235343e0237
373e0335342e0223220e0223222e0235343e0633321e0215140e02070721
321e0203bc050a100afd181620140906101914e043522e1115293e2a3b5b
452e0d090d080503060a194362764065976431184c8a729701fe0a110c06
6b1d291a0b08172c23212f252315f046735f5024213b2c191e251f0c1c2f
22171f171118252318335b7d483f7a8dab719b0c1929>PBAAAA+CIDFont+F1 AddT42Char 
PBAAAA+CIDFont+F1 /CharStrings get begin
/two 1006 def
end
PBAAAA+CIDFont+F1 /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFN+CIDFont+F1*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 47{/.notdef}rp /b 8{/.notdef}rp 
/k 7{/.notdef}rp /s 140{/.notdef}rp]
AHMWFN+CIDFont+F1 nf
AHMWFN+CIDFont+F1*1 [8.04004 0 0 -8.04004 0 0 ]msf
160.21 152.516 mo
(skb 2)
[3.21597 3.8593 4.18074 1.84918 0 ]xsh
gsave
204.251 143.041 mo
235.331 143.041 li
235.331 157.201 li
204.251 157.201 li
cp
eclp
204.011 157.441 mo
235.571 157.441 li
235.571 142.801 li
204.011 142.801 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[31.56 0 0 14.64 188.302 -85.4409 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 122 
/M[1 0 0 -122 0 122 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-"9\i1"9\i1"9\i1"U,&6
"U,&5"U,&5#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)!s8W-!s8W-!s8W-"9\i2
"9\i1"9\i1"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)!s8W-!s8W-!s8W-"9\i2
"9\i1"9\i1"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
204.251 157.201 mo
235.331 157.201 li
235.331 143.041 li
204.251 143.041 li
204.251 157.201 li
cp
.67657 .608606 .594385 .472297 cmyk
@
0 .990631 1 .000396735 cmyk
%ADOBeginSubsetFont: PBAAAA+CIDFont+F1 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CIDFont+F1 gcheck setglobal} if
2 9294 1007 <00010055ffe903b605250058013fb10102435558b70847010a46010b5ab8
ffc0b60f024d005a0131b802c9400d4e53264e40264e4e2640030e1bba02
e90000ffe8b40f024d000eb8ffe8400a0f024d000e010f030e45bb015600
3b0009015eb6113b113b111636b8ffe8b30b014d36b8ffe8b40b0f014c36
b80155b249532cb801044011202005495316180b014d16180b0f014c16b8
0156b240055600183f1aed2b2b3f12392fed3910ed2b2b1139392f2f10ed
10ed012f5f5e5d2bd42bed1217392f2f2f11123910ed30315d2b005e5d5d
1b400d0847010a46010b005a010f0345bb0156003b0009015eb6113b113b
111636b8ffe8b30b014d36b8ffe8b40b0f014c36b80155b249532cb80104
4011202005495316180b014d16180b0f014c16b80156b240055600183f1a
ed2b2b3f12392fed3910ed2b2b1139392f2f10ed10ed3031015f5e5d005e
5d5d5901140e0223222e0635343633321e0233323e0235342e022323222e
0235343e023333323e0235342e0223220e0223222e0235343e0633321e02
15140e0207151e0303b64a84b86d4274593a1209070310100a314c664137
543b1d23456947700d120c05050b110c713a5a3d20162b442e345c49330c
080c0804020609143e5e7b485e9163331e3a5739446c4b28017b61966635
131c1e10141b291d30251b1f1b1a2f43292d48331c0716271f1d2514081b
32472b213b2b191f25200714261e19211610132624192c53794c3b665038
0e0308355065>PBAAAA+CIDFont+F1 AddT42Char 
2 960 94 <0001003fffe9038c0525004900b9b10102435558b900410297b524322432
0c1bb8029cb2000c2ebb012d0037000a012db61137113711163cb8ffe8b4
0b0f014c3cb8012d400c411b05295316180b0f014c16b80158b240055600
183f1aed2b3f123939ed2b1139392f2f10ed10ed012fd4ed1239392f2fed
30311bbc002e012d0037000a012db61137113711163cb8ffe8b40b0f014c
3cb8012d400c411b05295316180b0f014c16b80158b240055600183f1aed
2b3f123939ed2b1139392f2f10ed10ed30315901140e0223222e0435343e
0233321e0233323e0235342e0635343e0233321e0615140e0223222e0223
220e0215141e06038c4c82ae634373583b1a0b04090f0a0e33506f49304c
351c304d6268624d3045759f592e5c503e1407050203070d0b0b30465c37
2b402b152f4f6468644e300184669a6734161f221a312e1f2a1a0b212821
172a3e262c3f312b303d5574515d8d5d2e0e181e140e17231a1d281a0c1c
211b1525341d2b3f312b303d5573>PBAAAA+CIDFont+F1 AddT42Char 
PBAAAA+CIDFont+F1 /CharStrings get begin
/three 1007 def
/S 94 def
end
PBAAAA+CIDFont+F1 /Encoding get
dup 51 /three put
dup 83 /S put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFN+CIDFont+F1*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three 31{/.notdef}rp /S 
14{/.notdef}rp /b 8{/.notdef}rp /k 7{/.notdef}rp /s 140{/.notdef}rp]
AHMWFN+CIDFont+F1 nf
AHMWFN+CIDFont+F1*1 [8.04004 0 0 -8.04004 0 0 ]msf
210.97 152.516 mo
(Skb 3)
[3.85919 3.69846 4.34158 1.76881 0 ]xsh
gsave
340.211 143.041 mo
371.411 143.041 li
371.411 157.201 li
340.211 157.201 li
cp
eclp
339.971 157.441 mo
371.651 157.441 li
371.651 142.801 li
339.971 142.801 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[31.68 0 0 14.64 324.262 -85.4409 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 122 
/M[1 0 0 -122 0 122 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-"9\i1"9\i1"9\i1"U,&6
"U,&5"U,&5#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)!s8W-!s8W-!s8W-"9\i2
"9\i1"9\i1"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)!s8W-!s8W-!s8W-"9\i2
"9\i1"9\i1"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
340.211 157.201 mo
371.411 157.201 li
371.411 143.041 li
340.211 143.041 li
340.211 157.201 li
cp
.67657 .608606 .594385 .472297 cmyk
@
0 .990631 1 .000396735 cmyk
%ADOBeginSubsetFont: PBAAAA+CIDFont+F1 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CIDFont+F1 gcheck setglobal} if
2 316 60 <0001008dfffa043e051400330061b10102435558bf003002940021000a02
930015002202c6b32c2c1509b802cc400e4000152752210a101b52105505
5500183f3f3f1239393f012fd41aed12392fed10fd32ed30311b400b2752
210a101b521055055500183f3f3f1239393f30315925140e022322262627
0111140e0223222e023511343e0233321e021511013e0333321e02151406
0701011616043e0b1f362941391907fe790c1e322726331e0d0d1e332627
321e0c017b071420322728341f0c1219fe9d01831609270b110b060a140e
0266fd9a0b100b06060b100b04c30b100a06060a100bfdd902260d110a04
060b100a112427fe2ffdb7291b00>PBAAAA+CIDFont+F1 AddT42Char 
PBAAAA+CIDFont+F1 /CharStrings get begin
/K 60 def
end
PBAAAA+CIDFont+F1 /Encoding get
dup 75 /K put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFN+CIDFont+F1*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three 23{/.notdef}rp /K 
7{/.notdef}rp /S 14{/.notdef}rp /b 8{/.notdef}rp /k 7{/.notdef}rp /s 
140{/.notdef}rp]
AHMWFN+CIDFont+F1 nf
AHMWFN+CIDFont+F1*1 [8.04004 0 0 -8.04004 0 0 ]msf
347.172 152.516 mo
(skb K)
[3.21597 3.85931 4.18073 1.84918 0 ]xsh
gsave
49.6909 90.601 mo
85.2109 90.601 li
85.2109 110.401 li
49.6909 110.401 li
cp
eclp
49.4509 110.641 mo
85.4509 110.641 li
85.4509 90.3609 li
49.4509 90.3609 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[36 0 0 20.28 33.7418 -38.6409 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 169 
/M[1 0 0 -169 0 169 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-
"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I
$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$i~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
49.6909 110.401 mo
85.2109 110.401 li
85.2109 90.6009 li
49.6909 90.6009 li
49.6909 110.401 li
cp
.67657 .608606 .594385 .472297 cmyk
@
.96 lw
.130894 100.441 mo
44.4109 100.441 li
@
49.6909 100.441 mo
42.7309 104.041 li
43.8109 101.761 43.8109 99.1209 42.7309 96.9609 cv
49.6909 100.441 li
cp
ef
9.61089 95.641 mo
40.3309 95.641 li
40.3309 105.241 li
9.61089 105.241 li
cp
0 0 0 0 cmyk
f
0 .990631 1 .000396735 cmyk
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 Initial
ct_T42Dict begin
-0.578 -0.254 1.473 1
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+CIDFont+F2
Type42DictBegin
[<00010000000c000c000c000c4f532f32d93d81a2000000cc000000606376
742077d37c860000012c000002906670676d03741f64000003bc00000789
676c79661d5ca3ab000086380000101068656164e9a89d9c00000b480000
0036686865610e880f3e00000b8000000024686d74784a5b076e00000ba4
000035926c6f6361d778d4d7000041380000206e6d617870158c083a0000
61a8000000206e616d6538d6910e000061c800001ce9707265701207efc7
00007eb40000078267646972000000000000000000000000000303850190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e5002effc000605b00000029000000004d53202000400020
25cc05d3fe51010d076001ae200101ff20280000042505ba000000200015
05ba0019000005ba00190000000000000000000000000000000000000000
0425001900000000ffe700000000ffe70000000000000000fe68ffea0000
00000000000000000000000002f5ffee05cd000002ddffee02f000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000800000008000000000000000000000000000000
000000000000000000000000000000000000000000d2010e012c01130000
000000c8010900c8000000000000000000000000000000890048001bff77
ffb8ffe500a4005f000aff5cffa1fff6000000000000000afff600000000
0000000000000059ffa700c9000000c3000000c2008300c3000000bd0000
00bd007900c3006c00bd009100af00000000026f00ae00a6009a0000009b
0094008b00cc00ae00a600940000000000ff000001e30000000000000000
000000000000000000000000000000000000000000cd00cd006801ee0060
008c0000000000000000000000000000000000a800a800a800b900cd00a8
0052016a0049007d007d0083008a00000071009b00910078000001fc0071
ff8f022a006d009400a0029a030a00b800ae008b018b019101d10391008c
00730268027d01b001dd021c033302a3026b02730152024c0021004c05e7
04f20098ff6800ac00c500850085005c0054006000b401baff1ffe680000
008300bc00940094ff85ffae00520029061400ae00460046fe580560008f
076002f20025003e004700500058007300a80160006000950025003e0047
00500058007300a801600000002d005000600081009300ba0108ffd3ffae
ff9106520060005c00b0012b012b04ba013e018507600016000a004b047d
069c076000600060004c00cb01dc04b305c2008200660082006e40415452
4d4c49483b393837363534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403
0201002c01b0184358456ab0194360b0462344231020b0464ef04d2fb000
121b21231133592d2c01b0184358b0052bb000134bb0145058b100403859
b0062b1b21231133592d2c01b01843584eb0032510f221b000124d1b2045
b00425b00425234a6164b0285258212310d21bb0032510f221b000125959
2d2cb01a435821211bb00225b0022549b00325b003254a612064b0105058
2121211bb00325b0032549b0005058b0005058b8ffe238211bb010382159
1bb0005258b01e38211bb8fff03821595959592d2c01b0184358b0052bb0
00134bb0145058b90000ffc03859b0062b1b21231133592d2c4e018a10b1
46194344b00014b10046e2b00015b90000fff03800b0003cb0282bb00225
10b0003c2d2c0118b0002fb00114f2b00113b001154db000122d2c01b018
4358b0052bb00013b90000ffe038b0062b1b21231133592d2c01b0184358
45646a23456469b01943646060b0462344231020b046f02fb000121b2121
208a208a525811331b212159592d2c01b10b0a432343650a2d2c00b10a0b
4323430b2d2c00b0462370b101463e01b0462370b10246453ab10200080d
2d2cb0122bb0022545b00225456ab0408b60b0022523442121212d2cb013
2bb0022545b00225456ab8ffc08c60b0022523442121212d2cb000b0122b
2121212d2cb000b0132b2121212d2c01b00643b00743650a2d2c2069b040
61b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2cb1
000325456854b01c4b505a58b0032545b0032545606820b004252344b004
2523441bb00325204568208a2344b00325456860b003252344592d2cb003
25204568208a2344b003254564686560b00425b0016023442d2cb0094358
8721c01bb01243588745b0112bb0472344b0477ae41b038a45186920b047
23448a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae4595959
182d2c208a4523456860442d2c456a422d2c01182f2d2c01b0184358b004
25b004254964234564696120b080626ab00225b00225618cb0194360b046
2344218a10b046f6211b21212121592d2c01b0184358b0022545b0022545
64606ab00325456a6120b00425456a208a8b65b0042523448cb003252344
21211b20456a4420456a44592d2c012045b00055b018435a584568234569
b0408b6120b080626a208a236120b003258b65b0042523448cb003252344
21211b2121b0192b592d2c018a8a45642345646164422d2cb00425b00425
b0192bb0184358b00425b00425b00325b01b2b01b0022543b04054b00225
43b000545a58b003252045b040614459b0022543b00054b0022543b04054
5a58b004252045b04060445959212121212d2c014b525843b00225452361
441b2121592d2c014b525843b00225452360441b2121592d2c4b52584544
1b2121592d2c0120b003252349b04060b0206320b000525823b002253823
b002256538008a63381b212121212159012d2c4b505845441b2121592d2c
01b005251023208af500b0016023edec2d2c01b005251023208af500b001
6123edec2d2c01b0062510f500edec2d2c462346608a8a462320468a608a
61b8ff8062232010238ab14b4b8a70456020b0005058b00161b8ffba8b1b
b0468c59b0106068013a2d2c2045b00325465258b0022546206861b00325
b003253f2321381b2111592d2c2045b00325465058b0022546206861b003
25b003253f2321381b2111592d2c00b00743b006430b2d2c8a10ec2d2cb0
0c4358211b2046b0005258b8fff0381bb0103859592d2c20b0005558b810
0063b003254564b00325456461b0005358b0021bb04061b0035925456953
5845441b2121591b21b0022545b00225456164b028515845441b21215959
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2c4b5358b00425b00425
4964234564696120b080626ab00225b00225618cb0462344218a10b046f6
211b218a11231220392f592d2c2121212121212d2cb0134358031b02592d
2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb00225b8fff038
b0282b8a102320d023b0102bb0054358c01b3c59201011b00012012d2c4b
53234b515a58381b2121592d2c01b0022510d023c901b00113b0001410b0
013cb001162d2c01b00013b001b0032549b0031738b001132d2c4b53234b
515a5820458a60441b2121592d2cb0024354584b53234b515a58381b2121
591b21212121592d2c4b53234b515a58381b2121592d2c4b5458381b2121
592d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b2121
21592d2c4b52587d1b7a592d2cb1020042b123018851b1400188535a58b9
10000020885458b202010243604259b12401885158b920000040885458b2
02020243604259b12401885458b2022002436042004b014b5258b2020802
436042591bb940000080885458b202040243604259b94000008063b80100
885458b202080243604259b94000010063b80200885458b2021002436042
595959592d000000000100000006f5c312a3c5d55f0f3cf5001b08000000
0000aff53caf00000000d35a2033fb5cfdf20bc908070000000900010000
00000000000100000760fe5200000bdefb5cfa7a0bc90001000000000000
00000000000000000a930258003200000000023900000220000000000000
02d700540000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000006aa00a400000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000473004e0473008b04000048047300480473
004800000000047300480000000001d3008b000000000400008b01d3008b
000000000473008b04730048000000000000000002aa008b000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000486005b00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000001d3008b00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000004c100660000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
019a00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000001400140014001c001c0051
005100510051005100510051005100510051005100510051005100510051
005100510051005100510051005100510051005100510051005100510051
005100510051005100510051005100510051005100510051010101010101
010101010101010101010101010101010101010101010101010101010101
0101010101c5024e02c5034603e403e404a904a904d404d4056305830583
05dc06560656065606950695069506950695069506950695069506950695
069506950695069506950695069506950695069506950695069506950695
069506950695069506950695069506950695069506950695069506950695
069506950695069506950695069506950695069506950695069506950695
069506950695069506950695069506950695069506950695069506950695
069506950695069506950695069506950695069506950695069506950695
06da06da06da06da06da06da06da06da06da06da06da06da06da06da06da
06da06da06da06da06da06da06da06da06da06da06da06da06da06da06da
06da06da06da06da06da06da06da06da06da06da06da06da06f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f506f506f506f506f506f506f506f506f506f506f506f506f506f5
06f506f50800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000800
080008000800080008000800080008000800080008000800080008000808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
08080808080808080000000100001036008000100000000000020010002f
0055000004e007890000000000>
<0000002d0222000100000000000001090000000100000000000100140109
0001000000000002000701660001000000000003001c0151000100000000
0004001401090001000000000005000c016d000100000000000600120179
000100000000000700480109000100000000000d0702018b000300010403
0002000c088d00030001040500020010089d0003000104060002000c08ad
0003000104070002001008b90003000104080002001008c9000300010409
0000021608d9000300010409000100280aef0003000104090002000e0ba9
000300010409000300380b7f000300010409000400280aef000300010409
000500180bb7000300010409000600240bcf000300010409000700900aef
0003000104090008002a08e7000300010409000b00540bf3000300010409
000d0e160c47000300010409000e00540bf300030001040a0002000c088d
00030001040b000200101a5d00030001040c0002000c088d00030001040e
0002000c1a6d0003000104100002000e1a7d000300010413000200121a8b
0003000104140002000c088d00030001041500020010088d000300010416
0002000c088d0003000104190002000e1a9d00030001041b000200101a6d
00030001041d0002000c088d00030001041f0002000c088d000300010424
0002000e1aab00030001042d0002000e1ab900030001080a0002000c088d
0003000108160002000c088d000300010c0a0002000c088d000300010c0c
0002000c088da92032303136204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c207269676874732072657365727665642e0d0d4865
62726577204f70656e54797065204c61796f7574206c6f67696320636f70
79726967687420a92032303033202620323030372c2052616c7068204861
6e636f636b2026204a6f686e20487564736f6e2e2054686973206c61796f
7574206c6f67696320666f72204269626c6963616c204865627265772069
73206f70656e20736f7572636520736f66747761726520756e6465722074
6865204d4954204c6963656e73653b2073656520656d626564646564206c
6963656e7365206465736372697074696f6e20666f722064657461696c73
2e4d6963726f736f66742053616e73205365726966206973206120747261
64656d61726b206f6620746865204d6963726f736f66742067726f757020
6f6620636f6d70616e6965732e4d6963726f736f66742053616e73205365
72696620526567756c617256657273696f6e20362e39364d6963726f736f
667453616e7353657269664d6963726f736f667420737570706c69656420
666f6e742e20596f75206d617920757365207468697320666f6e7420746f
206372656174652c20646973706c617920616e64207072696e7420636f6e
74656e74206173207065726d697474656420627920746865206c6963656e
7365207465726d732c206f72207465726d73206f66207573652c206f6620
746865204d6963726f736f66742070726f647563742c2073657276696365
206f7220636f6e74656e7420696e207768696368207468697320666f6e74
2077617320696e636c756465642e20596f75206d6179206f6e6c79202869
2920656d626564207468697320666f6e7420696e20636f6e74656e742061
73207065726d69747465642062792074686520656d62656464696e672072
65737472696374696f6e7320696e636c7564656420696e20746869732066
6f6e743b20616e6420286969292074656d706f726172696c7920646f776e
6c6f6164207468697320666f6e7420746f2061207072696e746572206f72
206f74686572206f75747075742064657669636520746f2068656c702070
72696e7420636f6e74656e742e20416e79206f7468657220757365206973
2070726f686962697465642e0d0d54686520666f6c6c6f77696e67206c69
63656e73652c206261736564206f6e20746865204d4954206c6963656e73
652028687474703a2f2f656e2e77696b6970656469612e6f72672f77696b
692f4d49545f4c6963656e7365292c206170706c69657320746f20746865
204f70656e54797065204c61796f7574206c6f67696320666f7220426962
6c6963616c2048656272657720d24c61796f7574204c6f676963d3206173
206a6f696e746c7920646576656c6f7065642062792052616c7068204861
6e636f636b20616e64204a6f686e20487564736f6e2e200d0d5065726d69
7373696f6e20697320686572656279206772616e7465642c206672656520
6f66206368617267652c20746f20616e7920706572736f6e206f62746169
6e696e67206120636f7079206f6620746865204f70656e54797065204c61
796f7574206c6f67696320666f72204269626c6963616c20486562726577
20616e64206173736f63696174656420646f63756d656e746174696f6e20
66696c6573202874686520d24c61796f7574204c6f67696320536f667477
617265d3292c20746f206465616c20696e20746865204c61796f7574204c
6f67696320536f66747761726520776974686f7574207265737472696374
696f6e2c20696e636c7564696e6720776974686f7574206c696d69746174
696f6e207468652072696768747320746f207573652c20636f70792c206d
6f646966792c206d657267652c207075626c6973682c2064697374726962
7574652c207375626c6963656e73652c20616e642f6f722073656c6c2063
6f70696573206f6620746865204c61796f7574204c6f67696320536f6674
776172652c20616e6420746f207065726d697420706572736f6e7320746f
2077686f6d20746865204c61796f7574204c6f67696320536f6674776172
65206973206675726e697368656420746f20646f20736f2c207375626a65
637420746f2074686520666f6c6c6f77696e6720636f6e646974696f6e73
3a0d0d5468652061626f766520636f70797269676874206e6f7469636520
616e642074686973207065726d697373696f6e206e6f7469636520736861
6c6c20626520696e636c7564656420696e20616c6c20636f70696573206f
72207375627374616e7469616c20706f7274696f6e73206f662074686520
4c61796f7574204c6f67696320536f6674776172652e0d0d54484520534f
4654574152452049532050524f564944454420274153204953272c205749
54484f55542057415252414e5459204f4620414e59204b494e442c204558
5052455353204f5220494d504c4945442c20494e434c5544494e47204255
54204e4f54204c494d4954454420544f205448452057415252414e544945
53204f46204d45524348414e544142494c4954592c204649544e45535320
464f52204120504152544943554c415220505552504f534520414e44204e
4f4e494e4652494e47454d454e542e20494e204e4f204556454e54205348
414c4c2054484520415554484f5253204f5220434f505952494748542048
4f4c44455253204245204c4941424c4520464f5220414e5920434c41494d
2c2044414d41474553204f52204f54484552204c494142494c4954592c20
5748455448455220494e20414e20414354494f4e204f4620434f4e545241
43542c20544f5254204f52204f54484552574953452c2041524953494e47
2046524f4d2c204f5554204f46204f5220494e20434f4e4e454354494f4e
20574954482054484520534f465457415245204f52205448452055534520
4f52204f54484552204445414c494e475320494e2054484520534f465457
4152452e0d004e006f0072006d0061006c006e0079006f00620079010d00
65006a006e00e9006e006f0072006d0061006c005300740061006e006400
6100720064039a03b103bd03bf03bd03b903ba03ac00a900200032003000
3100360020004d006900630072006f0073006f0066007400200043006f00
720070006f0072006100740069006f006e002e00200041006c006c002000
720069006700680074007300200072006500730065007200760065006400
2e000d000a000d000a0048006500620072006500770020004f0070006500
6e00540079007000650020004c00610079006f007500740020006c006f00
670069006300200063006f0070007900720069006700680074002000a900
2000320030003000330020002600200032003000300037002c0020005200
61006c00700068002000480061006e0063006f0063006b00200026002000
4a006f0068006e00200048007500640073006f006e002e00200054006800
6900730020006c00610079006f007500740020006c006f00670069006300
200066006f00720020004200690062006c006900630061006c0020004800
6500620072006500770020006900730020006f00700065006e0020007300
6f007500720063006500200073006f006600740077006100720065002000
75006e00640065007200200074006800650020004d004900540020004c00
6900630065006e00730065003b002000730065006500200065006d006200
6500640064006500640020006c006900630065006e007300650020006400
650073006300720069007000740069006f006e00200066006f0072002000
640065007400610069006c0073002e004d006900630072006f0073006f00
660074002000530061006e00730020005300650072006900660020006900
7300200061002000740072006100640065006d00610072006b0020006f00
6600200074006800650020004d006900630072006f0073006f0066007400
2000670072006f007500700020006f006600200063006f006d0070006100
6e006900650073002e004d006900630072006f0073006f00660074002000
530061006e00730020005300650072006900660020005200650067007500
6c0061007200560065007200730069006f006e00200036002e0039003600
4d006900630072006f0073006f0066007400530061006e00730053006500
72006900660068007400740070003a002f002f007700770077002e006d00
6900630072006f0073006f00660074002e0063006f006d002f0074007900
70006f006700720061007000680079002f0066006f006e00740073002f00
4d006900630072006f0073006f0066007400200073007500700070006c00
690065006400200066006f006e0074002e00200059006f00750020006d00
61007900200075007300650020007400680069007300200066006f006e00
7400200074006f0020006300720065006100740065002c00200064006900
730070006c0061007900200061006e00640020007000720069006e007400
200063006f006e00740065006e0074002000610073002000700065007200
6d0069007400740065006400200062007900200074006800650020006c00
6900630065006e007300650020007400650072006d0073002c0020006f00
720020007400650072006d00730020006f00660020007500730065002c00
20006f006600200074006800650020004d006900630072006f0073006f00
660074002000700072006f0064007500630074002c002000730065007200
760069006300650020006f007200200063006f006e00740065006e007400
200069006e00200077006800690063006800200074006800690073002000
66006f006e0074002000770061007300200069006e0063006c0075006400
650064002e00200059006f00750020006d006100790020006f006e006c00
79002000280069002900200065006d006200650064002000740068006900
7300200066006f006e007400200069006e00200063006f006e0074006500
6e00740020006100730020007000650072006d0069007400740065006400
2000620079002000740068006500200065006d0062006500640064006900
6e00670020007200650073007400720069006300740069006f006e007300
200069006e0063006c007500640065006400200069006e00200074006800
69007300200066006f006e0074003b00200061006e006400200028006900
690029002000740065006d0070006f0072006100720069006c0079002000
64006f0077006e006c006f00610064002000740068006900730020006600
6f006e007400200074006f002000610020007000720069006e0074006500
720020006f00720020006f00740068006500720020006f00750074007000
750074002000640065007600690063006500200074006f00200068006500
6c00700020007000720069006e007400200063006f006e00740065006e00
74002e00200041006e00790020006f007400680065007200200075007300
65002000690073002000700072006f006800690062006900740065006400
2e000d000a000d000a00540068006500200066006f006c006c006f007700
69006e00670020006c006900630065006e00730065002c00200062006100
73006500640020006f006e00200074006800650020004d00490054002000
6c006900630065006e00730065002000280068007400740070003a002f00
2f0065006e002e00770069006b006900700065006400690061002e006f00
720067002f00770069006b0069002f004d00490054005f004c0069006300
65006e007300650029002c0020006100700070006c006900650073002000
74006f00200074006800650020004f00700065006e005400790070006500
20004c00610079006f007500740020006c006f0067006900630020006600
6f00720020004200690062006c006900630061006c002000480065006200
72006500770020201c004c00610079006f007500740020004c006f006700
690063201d0020006100730020006a006f0069006e0074006c0079002000
64006500760065006c006f00700065006400200062007900200052006100
6c00700068002000480061006e0063006f0063006b00200061006e006400
20004a006f0068006e00200048007500640073006f006e002e0020000d00
0a000d000a005000650072006d0069007300730069006f006e0020006900
7300200068006500720065006200790020006700720061006e0074006500
64002c002000660072006500650020006f00660020006300680061007200
670065002c00200074006f00200061006e00790020007000650072007300
6f006e0020006f0062007400610069006e0069006e006700200061002000
63006f007000790020006f006600200074006800650020004f0070006500
6e00540079007000650020004c00610079006f007500740020006c006f00
670069006300200066006f00720020004200690062006c00690063006100
6c002000480065006200720065007700200061006e006400200061007300
73006f00630069006100740065006400200064006f00630075006d006500
6e0074006100740069006f006e002000660069006c006500730020002800
74006800650020201c004c00610079006f007500740020004c006f006700
69006300200053006f006600740077006100720065201d0029002c002000
74006f0020006400650061006c00200069006e0020007400680065002000
4c00610079006f007500740020004c006f00670069006300200053006f00
660074007700610072006500200077006900740068006f00750074002000
7200650073007400720069006300740069006f006e002c00200069006e00
63006c007500640069006e006700200077006900740068006f0075007400
20006c0069006d00690074006100740069006f006e002000740068006500
2000720069006700680074007300200074006f0020007500730065002c00
200063006f00700079002c0020006d006f0064006900660079002c002000
6d0065007200670065002c0020007000750062006c006900730068002c00
200064006900730074007200690062007500740065002c00200073007500
62006c006900630065006e00730065002c00200061006e0064002f006f00
72002000730065006c006c00200063006f00700069006500730020006f00
6600200074006800650020004c00610079006f007500740020004c006f00
670069006300200053006f006600740077006100720065002c0020006100
6e006400200074006f0020007000650072006d0069007400200070006500
720073006f006e007300200074006f002000770068006f006d0020007400
6800650020004c00610079006f007500740020004c006f00670069006300
200053006f00660074007700610072006500200069007300200066007500
72006e0069007300680065006400200074006f00200064006f0020007300
6f002c0020007300750062006a00650063007400200074006f0020007400
68006500200066006f006c006c006f00770069006e006700200063006f00
6e0064006900740069006f006e0073003a000d000a000d000a0054006800
65002000610062006f0076006500200063006f0070007900720069006700
6800740020006e006f007400690063006500200061006e00640020007400
68006900730020007000650072006d0069007300730069006f006e002000
6e006f00740069006300650020007300680061006c006c00200062006500
200069006e0063006c007500640065006400200069006e00200061006c00
6c00200063006f00700069006500730020006f0072002000730075006200
7300740061006e007400690061006c00200070006f007200740069006f00
6e00730020006f006600200074006800650020004c00610079006f007500
740020004c006f00670069006300200053006f0066007400770061007200
65002e000d000a000d000a00540048004500200053004f00460054005700
4100520045002000490053002000500052004f0056004900440045004400
200027004100530020004900530027002c00200057004900540048004f00
550054002000570041005200520041004e005400590020004f0046002000
41004e00590020004b0049004e0044002c00200045005800500052004500
5300530020004f005200200049004d0050004c004900450044002c002000
49004e0043004c005500440049004e004700200042005500540020004e00
4f00540020004c0049004d004900540045004400200054004f0020005400
480045002000570041005200520041004e00540049004500530020004f00
460020004d00450052004300480041004e0054004100420049004c004900
540059002c0020004600490054004e00450053005300200046004f005200
20004100200050004100520054004900430055004c004100520020005000
5500520050004f0053004500200041004e00440020004e004f004e004900
4e004600520049004e00470045004d0045004e0054002e00200049004e00
20004e004f0020004500560045004e00540020005300480041004c004c00
2000540048004500200041005500540048004f005200530020004f005200
200043004f005000590052004900470048005400200048004f004c004400
45005200530020004200450020004c004900410042004c00450020004600
4f005200200041004e005900200043004c00410049004d002c0020004400
41004d00410047004500530020004f00520020004f005400480045005200
20004c0049004100420049004c004900540059002c002000570048004500
5400480045005200200049004e00200041004e0020004100430054004900
4f004e0020004f004600200043004f004e00540052004100430054002c00
200054004f005200540020004f00520020004f0054004800450052005700
4900530045002c002000410052004900530049004e004700200046005200
4f004d002c0020004f005500540020004f00460020004f00520020004900
4e00200043004f004e004e0045004300540049004f004e00200057004900
540048002000540048004500200053004f00460054005700410052004500
20004f0052002000540048004500200055005300450020004f0052002000
4f00540048004500520020004400450041004c0049004e00470053002000
49004e002000540048004500200053004f00460054005700410052004500
2e000d000a004e006f0072006d00610061006c0069004e006f0072006d00
e1006c006e0065004e006f0072006d0061006c0065005300740061006e00
640061006100720064041e0431044b0447043d044b0439004e0061007600
610064006e006f0041007200720075006e00740061000000b15440b80135
b31c22392f410c0135003f0135004f0135008f0135009f01350005004001
2eb31c1f393041120128000100400128008001280090012800a0012800b0
0128000500ef0126000100400125b31b1f3940410a01240001002f010500
01004f010400010040010340aa090d392f652f662f672f682f692f6a2f74
2f752f7b2f7c2fd12fd20c20fc30fc40fcd0fc04f1f2197ff2018ff2aff2
e0f203d1d216171c7b7c161b7b7c19307c407c507c607c707c0576771617
1c6d7016171c6c6f16171c6b6e161b0f6b7f6b8f6e9f6eaf6e056b6e7f72
1a747514151c676a14151ca96ab96ae96af96a04666914151cc669016568
141b0f651f6502af68bf68ef65ff6504656885711a1973167a4319217943
19212f4147014200400142007f014200030050013b0001002f013a004f01
3a006f013a007f013a00bf013a0005007f01340001007f01330080013300
9001330003006f0132007f0132008f01320003007001210001002f012100
3f0121004f0121005f0121000400a0011e00b0011e00c0011e0003002001
2d0030012d0060012d0070012d0080012d0090012d00060040010fb40b1f
39092f411f010e005f010e009f010e00af010e00bf010e00050090010e00
bf010e00cf010e00df010e00ef010e00050020010e006f010e00b0010e00
d0010e00e0010eb205d10f4123010e003f010e00bf010e00cf010e000400
0f010e005f010e006f010e00a0010e00bf010e00cf010e00df010e000700
3f010e004f010e007f010e00af010e00ef010e00ff010eb2069f7f412301
0e00af010e00e0010e00ff010e0004001f010e003f010e00af010e00df01
0e00ef010e0005000f010e001f010e002f010e007f010e008f010e00c001
0e00df010e00ef010eb2086d9f411b010e00cf010e00ef010e00ff010e00
04000f010e00ef010e0002000f010e002f010e003f010e004f010e00c001
0e00df010e00ef010eb2073a70bd010e00df010e00020040010eb32b3339
5f411b010e0070010e008f010e009f010e00cf010e00df010e0006000f01
0e001f010e003f010e0080010e00bf010e00ef010e00060040010eb3091b
3970bb0136000100200108b30d113940b80102b20b1439b9ffc00107b31b
22392f4118010c004f010c0002002f010c0001008f010b0001002f010700
4f010700c0010700d001070004004f010700010040010040640b103940fe
0b1139e0f601e0f60114f424f40274f40140df60df0220d830d840d80366
c176c10299be0120b230b240b20360b070b0029b93002b9a92002b999100
2b9493002b9293002b9193062b9395032b9885042b9796042b9695032b99
95a995026f410f0131007f0131008f01310003013001160032001f011901
160015001f0116b285032bb9ffe0012fb30b143970410d01170001002f01
17003f0117004f0117005f0117000401130114b22a1fa0bc011400b00114
00c0011440160370fbf0fb022ffb6ffb7ffb0340fa50fa60faf0fa04b8ff
c040fffa11153950ec70ec0250ec70ec0240ec01bfeb0170ea0130ea0170
e9015fe970e9f0e903a0e9015fe870e802efe8017fe8bfe8efe803f0e701
f0e7012fe780e7a0e7f0e70450e6f0e60250e660e670e6c0e60450e50170
e50180e4e0e4f0e40340dca0dc02309050900220a04fa05fa09fa0afa0ef
a006e0f501e0f501f3851e1f2fe20140dd019fd5afd5bfd5030fd340d302
e0d0010fc470c4022fc43fc44fc45fc49fc4afc4efc4ffc40899bd99bf02
dad9042bd685022bcccd062bcd85022bc9c8062bc885022b8d8b042b8c8b
191f8b83c81f897d641f817f082b7d7f082b7f85072baf85042b8885012b
8785002b8485042b8385002b2ffd4ffd027f40abef012df03bf04ff069f0
7ff0051b37151836151535151234150f33150c3215093115063015032f15
002e1526270f28270f26002a1f0f2a2f2a3f2a032f24bf24022a2b0f2c2b
0f22230e24230f1e1f0e201f0f2005010f10110c0c0d0e0c090a0b0c0607
080c0304050c0001020c0003181f500f700f027f0f800fbf0f030f031f03
2f034f037f03bf03ef030704012c1f1b011d0d18071a0d1510170d120414
0d701b01501b701bf01b03b8ffc0400b1b131839701b801b02503301b012
4b004b5442b013014b004b5342b0332b4bb8032052b0322b4bb009505b58
b101018e59b0332bb00288b8010054b00488b8020054b012435a5b58b801
19b101018e851bb900040100b04b60858d592b1db0644b5358b0801d59b0
324b5358b0901d5900732b74742b2b2b2b2b7373742b2b2b2b2b2b2b732b
2b2b2b2b2b73732bb1282645b02a4561b02c4560442b2b2b2b2b2b2b2b2b
2b2b2b73b0ef45b0f0456168b0f04560b0ef23447373012b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b73737473737373732b74737374737373747374
7374747373747374747374737374742b747374742b73742b2b2b2b730073
2b2b2b2b2b2b2b2b2b2b737373737373737473742b2b73737373732b2b2b
742b73742b755e7374755e7374755e7374755e7374755e2b737473747373
73737373012b2bb018b0314b53422b2b73742b732b732b2b2b732b2b2b2b
732b2b2b73742b73732b7373732b7373742b732bb109322b4bb05052424b
b03c524bb00f505bb01a23424bb0c8524bb036505bb00c23422b000000>
[4113 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 1418 71 <00020048ffe703e705ba000a001900acb90014ffe0403b0d1036a80fb80f
02080c180c02a70ab70a02a807b807020228050101570101024700010103
961310170009960d190d161500198518120d0d063b18b8ffe8400e0b0b06
3b18068310100d0d063b10b8ffe040270b0b063b10400710171027104710
771087109710070d021b1868021a106602481be81bf81b03005f5d2b2b01
5f5e5d1a18102b2b4ded102b2bed3232003f2f10ed3f3fed31305f5d5f5d
5f5d5f5d5d5d5d2b01112623220615141633323706232202351012333217
11331123032b7a9d799189799e817eb1d0e4ffc1ac77bcbc013101f881d1
cfc4cb04980128fb0104012f6a01e7fa4600>HIBBAA+CIDFont+F2 AddT42Char 
2 0 0 <0002003200000226060000030007000033112111252111213201f4fe7801
1cfee40600fa006c0528>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/d 71 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 100 /d put
pop
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2 /HIBBAA+CIDFont+F2 findfont ct_VMDictPut
/AHMWFO+CIDFont+F2*1 
[100{/.notdef}rp /d 155{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
9.6123 102.956 mo
(d)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
9.6123 102.956 mo
(d) false chp
.0804053 lw
0 lc
0 lj
@
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 1676 72 <00020048ffe7042b043d0014001b00d840091a110108201317360cb8ffe0
40450b0e360813011067017701020b961b400a1b01110206001b9618304a
185a180218968a060165060103061007121712020900120e962500010a00
010f030016118312158309b8ffeeb40d0d063b09b8ffde400f0b0b063b09
1b0b8303100d0d063b03b8ffde40260b0b063b0340070337034703570304
11021d0969021c036602571d771d02481de81df81d03005f5d712b2b015f
5e5d1a18102b2b4ded32102b2bedd4ed003f5f5e5d5dedcd5f5e5d3f5f5d
5ded5d2b005f5e5d1a18104ded31305d5e5d2b2b015d0522001110003332
0011152116163332363733060613262623220607024eeafee40113dee301
0ffce10cb383639f04c316fd6017a07471a216190125010601040127fede
fef72db8b2655da4b202929998979a00>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/e 72 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 101 /e put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[100{/.notdef}rp /d /e 154{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
14.0343 102.956 mo
(e)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
14.0343 102.956 mo
(e) false chp
@
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 1180 70 <00010048ffe703e5043d0019009740212818381802270837080202090d96
4a060106101713964500010300160a09168317b8ffe0b40d0d063b17b8ff
d4401b0b0b063b1747176717020005101510020d03108303120d0d063b03
b8ffdc401d0b0b063b034007033703470357030411021b176a021a036602
f81b01005f712b2b015f5e5d1a18102b2b4ded5f5e5d5f5d102b2bed3939
003f5f5dedcd3f5dedcd31305f5d5d052200111000333216172326262322
06151416333236373306060239e2fef1010fe2aee915c204875f87a8a887
5f8704c215e9190123010801090122b0a65f64cdcbcacd645ea6b000>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/c 70 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 99 /c put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[99{/.notdef}rp /c /d /e 154{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
18.4564 102.956 mo
(c)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
18.4564 102.956 mo
(c) false chp
@
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 3000 82 <00020048ffe7042b043d000b0017009b400a12960a001a004a000300b8ff
e8402c0d0d063b00100c96050615064506030d0306180d0d063b06160803
18032803030709170927090314020f8303b8fff0b40d0d063b03b8ffd040
0e0b0b063b03158309100d0d063b09b8ffe0401b0b0b063b094019036902
18096602f8190148196819e819f81904005f5d712b2b011a18102b2b4ded
102b2bed5f5e5d5d003f2b5f5e5ded3f2b5ded3130013200111000232200
1110001332363534262322061514160239e3010ffef1e3e2fef1010fe287
a8a88787a8a8043dfedefef7fef8fedd0123010801090122fc3ecdcacbcd
cdcbcacd>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/o 82 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 111 /o put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[99{/.notdef}rp /c /d /e 9{/.notdef}rp /o 144{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
22.5568 102.956 mo
(o)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
22.5568 102.956 mo
(o) false chp
@
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
26.9788 102.956 mo
(d)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
26.9788 102.956 mo
(d) false chp
@
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
31.4812 102.956 mo
(e)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
31.4812 102.956 mo
(e) false chp
@
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
35.9033 102.956 mo
(d)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
35.9033 102.956 mo
(d) false chp
@
gsave
113.531 90.601 mo
147.491 90.601 li
147.491 110.401 li
113.531 110.401 li
cp
eclp
113.291 110.641 mo
147.731 110.641 li
147.731 90.3609 li
113.291 90.3609 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[34.44 0 0 20.28 97.5818 -38.6409 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 169 
/M[1 0 0 -169 0 169 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-
"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I
$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$i~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
.24 lw
1 lc
1 lj
113.531 110.401 mo
147.491 110.401 li
147.491 90.6009 li
113.531 90.6009 li
113.531 110.401 li
cp
.67657 .608606 .594385 .472297 cmyk
@
gsave
171.611 90.601 mo
207.011 90.601 li
207.011 110.401 li
171.611 110.401 li
cp
eclp
171.371 110.641 mo
207.251 110.641 li
207.251 90.3609 li
171.371 90.3609 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[35.88 0 0 20.28 155.662 -38.6409 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 169 
/M[1 0 0 -169 0 169 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-
"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I
$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$i~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
171.611 110.401 mo
207.011 110.401 li
207.011 90.6009 li
171.611 90.6009 li
171.611 110.401 li
cp
@
.96 lw
85.2109 100.441 mo
108.131 100.441 li
@
113.531 100.441 mo
106.451 104.041 li
107.531 101.761 107.531 99.1209 106.451 96.9609 cv
113.531 100.441 li
cp
ef
147.491 100.441 mo
166.331 100.441 li
@
171.611 100.441 mo
164.531 104.041 li
165.731 101.761 165.731 99.1209 164.531 96.9609 cv
171.611 100.441 li
cp
ef
67.4509 110.401 mo
67.4509 150.121 li
84.1309 150.121 li
@
89.4109 150.121 mo
82.3309 153.601 li
83.5309 151.441 83.5309 148.801 82.3309 146.521 cv
89.4109 150.121 li
cp
ef
130.451 110.401 mo
130.451 150.121 li
147.851 150.121 li
@
153.131 150.121 mo
146.171 153.601 li
147.251 151.441 147.251 148.801 146.171 146.521 cv
153.131 150.121 li
cp
ef
189.371 110.401 mo
189.371 150.121 li
198.851 150.121 li
@
204.251 150.121 mo
197.171 153.601 li
198.251 151.441 198.251 148.801 197.171 146.521 cv
204.251 150.121 li
cp
ef
gsave
52.6909 194.041 mo
85.2109 194.041 li
85.2109 213.841 li
52.6909 213.841 li
cp
eclp
52.4509 214.081 mo
85.4509 214.081 li
85.4509 193.801 li
52.4509 193.801 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[33 0 0 20.28 36.7418 -142.081 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 169 
/M[1 0 0 -169 0 169 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-
"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I
$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$i~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
.24 lw
52.6909 213.841 mo
85.2109 213.841 li
85.2109 194.041 li
52.6909 194.041 li
52.6909 213.841 li
cp
@
.96 lw
.130894 202.561 mo
.130894 203.881 li
47.4109 203.881 li
@
52.6909 203.881 mo
45.6109 207.481 li
46.8109 205.201 46.8109 202.681 45.6109 200.401 cv
52.6909 203.881 li
cp
ef
9.49089 199.081 mo
42.0109 199.081 li
42.0109 208.681 li
9.49089 208.681 li
cp
0 0 0 0 cmyk
f
0 .990631 1 .000396735 cmyk
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
9.4906 206.393 mo
(d)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
9.4906 206.393 mo
(d) false chp
.0804053 lw
0 lc
0 lj
@
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
13.9126 206.393 mo
(e)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
13.9126 206.393 mo
(e) false chp
@
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
18.3347 206.393 mo
(c)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
18.3347 206.393 mo
(c) false chp
@
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
22.4351 206.393 mo
(o)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
22.4351 206.393 mo
(o) false chp
@
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
26.8571 206.393 mo
(d)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
26.8571 206.393 mo
(d) false chp
@
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 2386 76 <0002008b0000014805ba000300070033b2059806b8ffc040100b0b063b06
00020f0109680504008501b8ffd0b60b0b063b01650810f62bfd3939e600
2f3f3f2bed313021231133352335330148bdbdbdbd0425c9cc00>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/i 76 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 105 /i put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[99{/.notdef}rp /c /d /e 3{/.notdef}rp /i 5{/.notdef}rp /o 
144{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
31.3595 206.393 mo
(i)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
31.3595 206.393 mo
(i) false chp
@
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 2822 81 <0001008b000003ec043d00100075402d9308a308020103110371039103a1
030509030113012301030a030a95000e02100f0f060e068505040d0d063b
05b8ffe6400f0b0b063b05000d850e020d0d063b0eb8ffca400e0b0b063b
0e4012056802110e65022b2b011a18102b2b4ded32102b2bed002f333f3f
1239ed31305f5e5d5e5d5d01363320111123113426232207112311330148
8db00167bd5d6a9090bdbd039e9ffe79fd4a02ae8272aafd08042500>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/n 81 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[99{/.notdef}rp /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n 
/o 144{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
33.1283 206.393 mo
(n)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
33.1283 206.393 mo
(n) false chp
@
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 1992 74 <00020048fe5203e7043d00180023011eb61a180b0b063b0bb8ffe8b40b0b
063b0cb8ffe8b40b0b063b19b8ffe0403b0b0b063ba723b72302281e0102
47190100a820b8200202551565150203a810b81002a70db70d0202470a01
00050a150a250a034501013a01010315b8ffd6b30d103604b8ffd6401812
16361c961410180f22960e1637050100053f0d10063b05b8ffc040130a11
36050896021c19160c8500100d0d063b00b8ffe840160b0b063b00068305
400d1036051f8311100d0d063b11b8ffe040270b0b063b11400711171127
114711771187119711070d0225006802241166024825e825f82503005f5d
2b2b015f5e5d1a18102b2b4dedd42bed102b2bed3232003fedc42b2b5f5d
3fed3f3fed31302b2b5f5d5d5d5f5d5f5d5d5f5d5f5d5f5d5f5d5d002b2b
2b2b25102122263533143332363535062322023510123332173533031126
232206151416333203e7fe32c8e7c3ea84907eb1d0e4ffc1ac77bcbc7a9d
799189799e52fe00ae93ae91d435980128fb0104012f6a52fd0c01f881d1
cfc4cb00>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/g 74 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 103 /g put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[99{/.notdef}rp /c /d /e /.notdef /g /.notdef /i 
4{/.notdef}rp /n /o 144{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
37.5504 206.393 mo
(g)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
37.5504 206.393 mo
(g) false chp
@
gsave
113.531 194.041 mo
145.931 194.041 li
145.931 213.841 li
113.531 213.841 li
cp
eclp
113.291 214.081 mo
146.171 214.081 li
146.171 193.801 li
113.291 193.801 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[32.88 0 0 20.28 97.5818 -142.081 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 169 
/M[1 0 0 -169 0 169 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-
"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I
$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$i~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
.24 lw
1 lc
1 lj
113.531 213.841 mo
145.931 213.841 li
145.931 194.041 li
113.531 194.041 li
113.531 213.841 li
cp
.67657 .608606 .594385 .472297 cmyk
@
gsave
174.251 194.041 mo
206.771 194.041 li
206.771 213.841 li
174.251 213.841 li
cp
eclp
174.011 214.081 mo
207.011 214.081 li
207.011 193.801 li
174.011 193.801 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[33 0 0 20.28 158.302 -142.081 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 169 
/M[1 0 0 -169 0 169 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-
"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I
$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$i~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
174.251 213.841 mo
206.771 213.841 li
206.771 194.041 li
174.251 194.041 li
174.251 213.841 li
cp
@
.96 lw
85.2109 203.881 mo
108.131 203.881 li
@
113.531 203.881 mo
106.451 207.481 li
107.531 205.201 107.531 202.681 106.451 200.401 cv
113.531 203.881 li
cp
ef
145.931 203.881 mo
168.971 203.881 li
@
174.251 203.881 mo
167.291 207.481 li
168.371 205.201 168.371 202.681 167.291 200.401 cv
174.251 203.881 li
cp
ef
gsave
265.331 194.041 mo
297.731 194.041 li
297.731 213.841 li
265.331 213.841 li
cp
eclp
265.091 214.081 mo
297.971 214.081 li
297.971 193.801 li
265.091 193.801 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[32.88 0 0 20.28 249.382 -142.081 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 169 
/M[1 0 0 -169 0 169 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-
"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I
$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$i~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
.24 lw
265.331 213.841 mo
297.731 213.841 li
297.731 194.041 li
265.331 194.041 li
265.331 213.841 li
cp
@
.96 lw
281.531 194.041 mo
281.531 183.361 li
355.811 183.361 li
355.811 162.481 li
@
355.811 157.201 mo
359.411 164.161 li
357.131 163.081 354.491 163.081 352.331 164.161 cv
355.811 157.201 li
cp
ef
0 .990631 1 .000396735 cmyk
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 3370 171 <0003005b0000042b00cd00030007000b005a403b01020506040ab00900af
5701d70102010508af5809d809020904af054008052805020b000c0d05af
3030750df50d02770d01470d01580df80d02005f715d715d2b015f5e5d1a
18104dedd45ded10d45ded002fed17393130212335330523353305233533
042bccccfe7eccccfe7ecccccdcdcdcdcd00>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/ellipsis 171 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 133 /ellipsis put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[99{/.notdef}rp /c /d /e /.notdef /g /.notdef /i 
4{/.notdef}rp /n /o 21{/.notdef}rp /ellipsis 122{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
275.891 148.92 mo
(\205)sh
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
275.891 148.92 mo
(\205) false chp
3.277 lw
0 lc
0 lj
gsave
[.0303953 0 0 .030396 -15.7091 -244.799 ]ct
@
grestore newpath
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
281.568 148.92 mo
(\205)sh
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
281.568 148.92 mo
(\205) false chp
gsave
[.0303953 0 0 .030396 -15.7091 -244.799 ]ct
@
grestore newpath
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 40 3 <00010000000000000000000000003100>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/space 3 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 32 /space put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[32{/.notdef}rp /space 66{/.notdef}rp /c /d /e /.notdef /g 
/.notdef /i 4{/.notdef}rp /n /o 21{/.notdef}rp /ellipsis 122{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
287.146 148.92 mo
( )sh
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
287.146 148.92 mo
( ) false chp
gsave
[.0303953 0 0 .030396 -15.7091 -244.799 ]ct
@
grestore newpath
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
225.367 206.998 mo
(\205)sh
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
225.367 206.998 mo
(\205) false chp
gsave
[.0303953 0 0 .030396 -15.7091 -244.799 ]ct
@
grestore newpath
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
231.044 206.998 mo
(\205)sh
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
231.044 206.998 mo
(\205) false chp
gsave
[.0303953 0 0 .030396 -15.7091 -244.799 ]ct
@
grestore newpath
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
236.621 206.998 mo
( )sh
AHMWFO+CIDFont+F2*1 [9.95992 0 0 -9.96016 0 0 ]msf
236.621 206.998 mo
( ) false chp
gsave
[.0303953 0 0 .030396 -15.7091 -244.799 ]ct
@
grestore newpath
gsave
92.2909 55.0809 mo
123.371 55.0809 li
123.371 69.241 li
92.2909 69.241 li
cp
eclp
92.0509 69.4809 mo
123.611 69.4809 li
123.611 54.8409 li
92.0509 54.8409 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[31.56 0 0 14.64 76.3418 2.5191 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 122 
/M[1 0 0 -122 0 122 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-"9\i1"9\i1"U,&5"U,&5
"U,&5"pP;;#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!s8W-!s8W-"9\i1"9\i1
"9\i1"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!s8W-!s8W-"9\i1"9\i1
"9\i1"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
.24 lw
1 lc
1 lj
92.2909 69.2409 mo
123.371 69.2409 li
123.371 55.0809 li
92.2909 55.0809 li
92.2909 69.2409 li
cp
.67657 .608606 .594385 .472297 cmyk
@
0 .990631 1 .000396735 cmyk
AHMWFN+CIDFont+F1*1 [8.04004 0 0 -8.04004 0 0 ]msf
102.253 64.6766 mo
(skb)
[3.21596 3.85931 0 ]xsh
gsave
156.011 55.0809 mo
187.211 55.0809 li
187.211 69.241 li
156.011 69.241 li
cp
eclp
155.771 69.4809 mo
187.451 69.4809 li
187.451 54.8409 li
155.771 54.8409 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[31.68 0 0 14.64 140.062 2.5191 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 122 
/M[1 0 0 -122 0 122 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-"9\i1"9\i1"U,&5"U,&5
"U,&5"pP;;#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!s8W-!s8W-"9\i1"9\i1
"9\i1"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!s8W-!s8W-"9\i1"9\i1
"9\i1"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
156.011 69.2409 mo
187.211 69.2409 li
187.211 55.0809 li
156.011 55.0809 li
156.011 69.2409 li
cp
.67657 .608606 .594385 .472297 cmyk
@
0 .990631 1 .000396735 cmyk
AHMWFN+CIDFont+F1*1 [8.04004 0 0 -8.04004 0 0 ]msf
165.973 64.6766 mo
(skb)
[3.21596 3.85931 0 ]xsh
gsave
207.011 55.0809 mo
238.211 55.0809 li
238.211 69.241 li
207.011 69.241 li
cp
eclp
206.771 69.4809 mo
238.451 69.4809 li
238.451 54.8409 li
206.771 54.8409 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[31.68 0 0 14.64 191.062 2.5191 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 122 
/M[1 0 0 -122 0 122 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-"9\i1"9\i1"U,&5"U,&5
"U,&5"pP;;#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!s8W-!s8W-"9\i1"9\i1
"9\i1"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!s8W-!s8W-"9\i1"9\i1
"9\i1"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
207.011 69.2409 mo
238.211 69.2409 li
238.211 55.0809 li
207.011 55.0809 li
207.011 69.2409 li
cp
.67657 .608606 .594385 .472297 cmyk
@
0 .990631 1 .000396735 cmyk
AHMWFN+CIDFont+F1*1 [8.04004 0 0 -8.04004 0 0 ]msf
216.973 64.6766 mo
(skb)
[3.21597 3.85931 0 ]xsh
gsave
52.5709 2.64099 mo
87.9709 2.64099 li
87.9709 22.561 li
52.5709 22.561 li
cp
eclp
52.3309 22.8009 mo
88.2109 22.8009 li
88.2109 2.40092 li
52.3309 2.40092 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[35.88 0 0 20.4 36.6218 49.1991 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 170 
/M[1 0 0 -170 0 170 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-
"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I
$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
52.5709 22.5609 mo
87.9709 22.5609 li
87.9709 2.64093 li
52.5709 2.64093 li
52.5709 22.5609 li
cp
.67657 .608606 .594385 .472297 cmyk
@
.96 lw
3.01089 12.6009 mo
47.2909 12.6009 li
@
52.5709 12.6009 mo
45.4909 16.0809 li
46.6909 13.9209 46.6909 11.2809 45.4909 9.12093 cv
52.5709 12.6009 li
cp
ef
13.9309 7.80096 mo
41.5309 7.80096 li
41.5309 17.4009 li
13.9309 17.4009 li
cp
0 0 0 0 cmyk
f
0 .990631 1 .000396735 cmyk
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 906 69 <0002008bffe7042b05ba000e001900bd4047a819b819020248190100a715
b715020225130103580f010a0a1a0a2a0a3a0a5a0a6a0a7a0a0702770687
0697060301a704b70402a801b80102179602100d00119608160c148305b8
fff4b40d0d063b05b8ffd240150b0b063b050805180528054805040d020f
000b850cb8fff4b40d0d063b0cb8ffca40160b0b063b0c401b0569021a0c
6502481be81bf81b03005f5d2b2b011a18102b2b4ded32325f5e5d102b2b
ed002f3fed3f3fed31305d5d5f5d5f5d5d5f5d5f5d5f5d5f5d0136333212
15100223222715231133111633323635342623220701487eb1d0e4ffc2ac
76bdbd799d7a90887a9d8103a697fed9fbfefbfed16b5205bafb4281d1cf
c4cbb600>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/b 69 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[32{/.notdef}rp /space 65{/.notdef}rp /b /c /d /e /.notdef 
/g /.notdef /i 4{/.notdef}rp /n /o 21{/.notdef}rp /ellipsis 
122{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
14.0524 15.1159 mo
(b)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
14.0524 15.1159 mo
(b) false chp
.0804053 lw
0 lc
0 lj
@
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 514 68 <0002004effe703e7043d00090020012240321f2a0d1136071d171d271d37
1d0402971aa71ab71ac71ad71a05017a140103b70ec70ed70ee70ef70e05
080d180d02090109b8ffe0400b0d113603300d1036019712b8ffc040400d
0d063b1240120c14183608121812020d001b0c1297183008191819281968
197819c819061916961b1007960c162020210d1136188508191819281903
0a0019b8fff440180d0d063b190c0b0b063b19190f120120851f0c0d0d06
3b1fb8ffe8b50b0b063b1f04b8fff8400d0d0d063b04830f140d0d063b0f
b8ffe440180b0b063b0f40221f6802210f6602572201a72201482201005f
5d5d712b2b011a18102b2b4ded2b102b2bed323212392f2b2b5f5e5ded2b
002f3fed3fedc45d2b005f5e5d2b1a18102b4ded31302b2b5f5e5d5d5f5d
5f5d5f5d012b013523201514163332361706232226351021333426262322
072312213216151123032b81fe6678665dae3290e39ecc02815c186e78fc
08bc1501b5cce4bc0117ebdf5157546286ab870174726744b40147a2edfd
5200>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/a 68 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[32{/.notdef}rp /space 64{/.notdef}rp /a /b /c /d /e 
/.notdef /g /.notdef /i 4{/.notdef}rp /n /o 21{/.notdef}rp 
/ellipsis 122{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
18.4744 15.1159 mo
(a)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
18.4744 15.1159 mo
(a) false chp
@
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
22.8965 15.1159 mo
(c)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
22.8965 15.1159 mo
(c) false chp
@
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 2472 78 <0001008b000003f805ba000b00eab50920161b3608b8ffe0404c141b3627
08470802000b0b0002030201030a02011c02030187000b1400000b08091c
09870a03140a0a03150b01070b01020703010f00010208030a0f0600050b
05130ae30a020a0a0111030ab8ffc0b3141b360ab8ffc0b50b10360a0a00
b8ffc840090b0b063b0008038505b8fff4b40d0d063b05b8ffc840140b0b
063b05400d0075020c056502870da70d02005f5d2b2b011a18102b2b4ded
32122b392f2b2b5f5e5d5d1239002f3f3f173931305f5e5d5f5d5d87052e
2b044b52587d1b7a5910c487052e182b084b52587d1b7a5910c40708103c
083c005f5d2b012b21230107112311331101330103f8e1fea776bdbd0199
eefe6e021b75fe5a05bafcc101aafe75>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/k 78 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 107 /k put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[32{/.notdef}rp /space 64{/.notdef}rp /a /b /c /d /e 
/.notdef /g /.notdef /i /.notdef /k 2{/.notdef}rp /n 
/o 21{/.notdef}rp /ellipsis 122{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
26.9968 15.1159 mo
(k)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
26.9968 15.1159 mo
(k) false chp
@
%ADOBeginSubsetFont: HIBBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CIDFont+F2 gcheck setglobal} if
2 2758 79 <0001008b0000014805ba00030028b70200010568008501b8fffcb40d0d06
3b01b8ffd0b60b0b063b01650410f62b2bfde6002f3f3130212311330148
bdbd05ba>HIBBAA+CIDFont+F2 AddT42Char 
HIBBAA+CIDFont+F2 /CharStrings get begin
/l 79 def
end
HIBBAA+CIDFont+F2 /Encoding get
dup 108 /l put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AHMWFO+CIDFont+F2*1 
[32{/.notdef}rp /space 64{/.notdef}rp /a /b /c /d /e 
/.notdef /g /.notdef /i /.notdef /k /l /.notdef 
/n /o 21{/.notdef}rp /ellipsis 122{/.notdef}rp]
AHMWFO+CIDFont+F2 nf
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
30.9365 15.1159 mo
(l)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
30.9365 15.1159 mo
(l) false chp
@
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
32.7857 15.1159 mo
(o)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
32.7857 15.1159 mo
(o) false chp
@
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
37.2077 15.1159 mo
(g)sh
AHMWFO+CIDFont+F2*1 [8.04004 0 0 -8.04004 0 0 ]msf
37.2077 15.1159 mo
(g) false chp
@
gsave
116.291 2.64099 mo
150.371 2.64099 li
150.371 22.561 li
116.291 22.561 li
cp
eclp
116.051 22.8009 mo
150.611 22.8009 li
150.611 2.40092 li
116.051 2.40092 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[34.56 0 0 20.4 100.342 49.1991 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 170 
/M[1 0 0 -170 0 170 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-
"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I
$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
.24 lw
1 lc
1 lj
116.291 22.5609 mo
150.371 22.5609 li
150.371 2.64093 li
116.291 2.64093 li
116.291 22.5609 li
cp
.67657 .608606 .594385 .472297 cmyk
@
gsave
174.491 2.64099 mo
209.891 2.64099 li
209.891 22.561 li
174.491 22.561 li
cp
eclp
174.251 22.8009 mo
210.131 22.8009 li
210.131 2.40092 li
174.251 2.40092 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 15.7091 72 ]ct
[35.88 0 0 20.4 158.542 49.1991 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 170 
/M[1 0 0 -170 0 170 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<E3%!<E3%!<E3%!<E3%!s8W-!s8W-!s8W-!s8W-
"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#6tJ=#6tJ=#mgnE#mgnE$47+I$47+I
$47+I$47+I$47+I$47+I$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WiE)!WiE)!WiE)!WiE)
!s8W-!s8W-"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"U,&5"U,&5"U,&5"U,&5#6tJ=#6tJ=#RC\A#RC\A
#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#mg~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
174.491 22.5609 mo
209.891 22.5609 li
209.891 2.64093 li
174.491 2.64093 li
174.491 22.5609 li
cp
@
.96 lw
87.9709 12.6009 mo
111.011 12.6009 li
@
116.291 12.6009 mo
109.331 16.0809 li
110.411 13.9209 110.411 11.2809 109.331 9.12093 cv
116.291 12.6009 li
cp
ef
150.371 12.6009 mo
169.091 12.6009 li
@
174.491 12.6009 mo
167.411 16.0809 li
168.491 13.9209 168.491 11.2809 167.411 9.12093 cv
174.491 12.6009 li
cp
ef
70.3309 22.5609 mo
70.3309 62.1609 li
86.8909 62.1609 li
@
92.2909 62.1609 mo
85.2109 65.7609 li
86.2909 63.4809 86.2909 60.9609 85.2109 58.6809 cv
92.2909 62.1609 li
cp
ef
133.331 22.5609 mo
133.331 62.1609 li
150.731 62.1609 li
@
156.011 62.1609 mo
148.931 65.7609 li
150.131 63.4809 150.131 60.9609 148.931 58.6809 cv
156.011 62.1609 li
cp
ef
192.131 22.5609 mo
192.131 62.1609 li
201.731 62.1609 li
@
207.011 62.1609 mo
200.051 65.7609 li
201.131 63.4809 201.131 60.9609 200.051 58.6809 cv
207.011 62.1609 li
cp
ef
129.731 194.041 mo
129.731 183.361 li
219.731 183.361 li
219.731 162.481 li
@
219.731 157.201 mo
223.331 164.161 li
221.051 163.081 218.531 163.081 216.251 164.161 cv
219.731 157.201 li
cp
ef
68.8909 194.041 mo
68.8909 175.561 li
168.731 175.561 li
168.731 162.481 li
@
168.731 157.201 mo
172.331 164.161 li
170.051 163.081 167.411 163.081 165.251 164.161 cv
168.731 157.201 li
cp
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/AHMWFO+CIDFont+F2*1 uf
/AHMWFO+CIDFont+F2 uf
/HIBBAA+CIDFont+F2 uf
/AHMWFN+CIDFont+F1*1 uf
/AHMWFN+CIDFont+F1 uf
/PBAAAA+CIDFont+F1 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
